// ignore_for_file: avoid_print, unused_local_variable

import 'package:bloc/bloc.dart';
import 'package:dartz/dartz.dart';
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:injectable/injectable.dart';
import 'package:savings_deposit/domain/core/failure/main_failure.dart';
import 'package:savings_deposit/domain/customer/customer_settlement/i_settlement.dart';
import 'package:savings_deposit/domain/customer/customer_settlement/models/settlement.dart';
import 'package:savings_deposit/domain/customer/customer_statements/models/customer_statement_model.dart';
import 'package:savings_deposit/domain/customer/deposit/failure/deposit_failure.dart';
import 'package:savings_deposit/domain/customer/deposit/i_customer_deposit.dart';
import 'package:savings_deposit/domain/customer/deposit/models/deposit_model.dart';
import 'package:savings_deposit/domain/customer/failure/customer_failure.dart';
import 'package:savings_deposit/domain/customer/i_customer_repo.dart';
import 'package:age_calculator/age_calculator.dart';
import 'package:savings_deposit/domain/customer/mpin/i_mpin_repo.dart';
import 'package:savings_deposit/domain/customer/new_sd/failure/new_sd_failure.dart';
import 'package:savings_deposit/domain/customer/new_sd/i_repo/i_new_sd_repo.dart';
import 'package:savings_deposit/domain/customer/payment_card/customer_bank_model/customer_bank_model.dart';
import 'package:savings_deposit/domain/customer/payment_card/ifsc_model/ifsc_model.dart';
import 'package:savings_deposit/domain/customer/payment_card/model/payment_model.dart';
import 'package:savings_deposit/domain/customer/remove_customer_notification/i_remove_customer_notification.dart';
import 'package:savings_deposit/domain/customer/withdrawal/i_withdrawal_repo.dart';
import 'package:savings_deposit/domain/customer/withdrawal/models/withdrawal_model.dart';
import 'package:savings_deposit/domain/remove_scheduled_transaction/failure/remove_scheduled_transaction_failure.dart';
import 'package:savings_deposit/domain/remove_scheduled_transaction/i_remove_scheduled_transaction_repo.dart';
import 'package:savings_deposit/infrastructure/customer/customer_statement/customer_statement_repo.dart';
import 'package:savings_deposit/presentation/pages/customer/widgets/customer_account_statement/widgets/statement_data_table.dart';

import '../../domain/customer/models/customer_models.dart';

import '../../domain/customer/new_sd/models/agent_model/agentoremployee_model.dart';
import '../../domain/customer/new_sd/models/available_scheme_model/available_schemes.dart';
import '../../domain/customer/new_sd/models/coapplicant_rights_model/coapplicant_rights_model.dart';
import '../../domain/customer/new_sd/models/nominee_relation_model/nominee_relation_model.dart';
import '../../domain/customer/new_sd/models/sd_post_response/post_response.dart';

part 'customer_state.dart';
part 'customer_event.dart';
part 'customer_bloc.freezed.dart';

@injectable
class CustomerBloc extends Bloc<CustomerEvent, CustomerState> {
  final ICustomerRepo iCustomerRepo;
  final INewSavingsDeposit iNewSavingsDeposit;
  final ISettlementRepo iSettlementRepo;
  final ICustomerDeposit iCustomerDeposit;
  final IwithdrawalRepo iwithdrawalRepo;
  final IRemoveScheduledTransactionRepo iRemoveScheduledTransactionRepo;
  final IRemoveCustomerNotification iRemoveCustomerNotification;
  final IMpinRepo iMpinRepo;
  CustomerBloc(
    this.iCustomerRepo,
    this.iNewSavingsDeposit,
    this.iSettlementRepo,
    this.iCustomerDeposit,
    this.iwithdrawalRepo,
    this.iRemoveScheduledTransactionRepo,
    this.iRemoveCustomerNotification,
    this.iMpinRepo,
  ) : super(CustomerState.initial()) {
    on<_Started>((event, emit) {
      emit(CustomerState.initial());
    });
    //////////token//////
    on<_SaveLoginToken>((event, emit) {
      emit(state.copyWith(
        loginToken: event.loginToken,
        sdaccountdetailsFailureorSuccess: none(),
        goldLoandetailsFailureorSuccess: none(),
        rddetailsFailureorSuccess: none(),
        customerAccountSuccessOrfailOption: none(),
        customerOtherBankSuccessOrfailOption: none(),
        customerNotificationSuccessOrfailOption: none(),
        customerProfileSuccessOrfailOption: none(),
        customerScheduledTransactionSuccessOrfailOption: none(),
        customerStatementSuccessOrfailOption: none(),
        customerStatementTransactionsSuccessOrfailOption: none(),
        settlementDetailsFailureOrSuccess: none(),
        settlementFailureOrSuccess: none(),
        removeScheduledTransactionFailureOrSuccess: none(),
        availableSchemeFailureOrSuccess: none(),
        depositFailureOrSuccess: none(),
        customerPaymentSuccessOrfailOption: none(),
        withdrawalPostFailureOrSuccess: none(),
        removeCustomerNotificationFailureOrSuccess: none(),
        newSdPostFailureOrSuccess: none(),
        validateSalescodeFailureOrSuccess: none(),
        ifscCodeFailureOrSuccess: none(),
        customerBankFailureOrSuccess: none(),
        coApplicantRightsFailureOrSuccess: none(),
        nomineeRelationFailureOrSuccess: none(),
        accountMoreInfoFailureOrSuccess: none(),
      ));
    });

//--------------MPIN PAGE----------------

    on<_FetchCustomerProfile>((event, emit) async {
      emit(
        state.copyWith(
          customerProfileLoading: true,
          sdaccountdetailsFailureorSuccess: none(),
          goldLoandetailsFailureorSuccess: none(),
          rddetailsFailureorSuccess: none(),
          customerAccountSuccessOrfailOption: none(),
          customerOtherBankSuccessOrfailOption: none(),
          customerNotificationSuccessOrfailOption: none(),
          customerProfileSuccessOrfailOption: none(),
          customerScheduledTransactionSuccessOrfailOption: none(),
          customerStatementSuccessOrfailOption: none(),
          customerStatementTransactionsSuccessOrfailOption: none(),
          settlementDetailsFailureOrSuccess: none(),
          settlementFailureOrSuccess: none(),
          removeScheduledTransactionFailureOrSuccess: none(),
          availableSchemeFailureOrSuccess: none(),
          depositFailureOrSuccess: none(),
          customerPaymentSuccessOrfailOption: none(),
          withdrawalPostFailureOrSuccess: none(),
          removeCustomerNotificationFailureOrSuccess: none(),
          newSdPostFailureOrSuccess: none(),
          validateSalescodeFailureOrSuccess: none(),
          ifscCodeFailureOrSuccess: none(),
          customerBankFailureOrSuccess: none(),
          coApplicantRightsFailureOrSuccess: none(),
          nomineeRelationFailureOrSuccess: none(),
          accountMoreInfoFailureOrSuccess: none(),
        ),
      );
      final Either<CustomerFailure, CustomerProfileModel>
          customerProfileOption = await iCustomerRepo.getCustomerDetails(
        customerId: event.customerId,
        loginToken: state.loginToken,
      );
      emit(
        customerProfileOption.fold(
          (failure) => state.copyWith(
            customerProfileLoading: false,
            customerProfileSuccessOrfailOption: Some(Left(failure)),
            sdaccountdetailsFailureorSuccess: none(),
            goldLoandetailsFailureorSuccess: none(),
            rddetailsFailureorSuccess: none(),
            customerAccountSuccessOrfailOption: none(),
            customerOtherBankSuccessOrfailOption: none(),
            customerNotificationSuccessOrfailOption: none(),
            customerScheduledTransactionSuccessOrfailOption: none(),
            customerStatementSuccessOrfailOption: none(),
            customerStatementTransactionsSuccessOrfailOption: none(),
            settlementDetailsFailureOrSuccess: none(),
            settlementFailureOrSuccess: none(),
            removeScheduledTransactionFailureOrSuccess: none(),
            availableSchemeFailureOrSuccess: none(),
            depositFailureOrSuccess: none(),
            customerPaymentSuccessOrfailOption: none(),
            withdrawalPostFailureOrSuccess: none(),
            removeCustomerNotificationFailureOrSuccess: none(),
            newSdPostFailureOrSuccess: none(),
            validateSalescodeFailureOrSuccess: none(),
            ifscCodeFailureOrSuccess: none(),
            customerBankFailureOrSuccess: none(),
            coApplicantRightsFailureOrSuccess: none(),
            nomineeRelationFailureOrSuccess: none(),
            accountMoreInfoFailureOrSuccess: none(),
          ),
          (success) => state.copyWith(
            customerProfileLoading: false,
            customerProfileSuccessOrfailOption: Some(Right(success)),
            sdaccountdetailsFailureorSuccess: none(),
            goldLoandetailsFailureorSuccess: none(),
            rddetailsFailureorSuccess: none(),
            customerAccountSuccessOrfailOption: none(),
            customerOtherBankSuccessOrfailOption: none(),
            customerNotificationSuccessOrfailOption: none(),
            customerScheduledTransactionSuccessOrfailOption: none(),
            customerStatementSuccessOrfailOption: none(),
            customerStatementTransactionsSuccessOrfailOption: none(),
            settlementDetailsFailureOrSuccess: none(),
            settlementFailureOrSuccess: none(),
            removeScheduledTransactionFailureOrSuccess: none(),
            availableSchemeFailureOrSuccess: none(),
            depositFailureOrSuccess: none(),
            customerPaymentSuccessOrfailOption: none(),
            withdrawalPostFailureOrSuccess: none(),
            removeCustomerNotificationFailureOrSuccess: none(),
            newSdPostFailureOrSuccess: none(),
            validateSalescodeFailureOrSuccess: none(),
            ifscCodeFailureOrSuccess: none(),
            customerBankFailureOrSuccess: none(),
            coApplicantRightsFailureOrSuccess: none(),
            nomineeRelationFailureOrSuccess: none(),
            accountMoreInfoFailureOrSuccess: none(),
            customerProfile: success,
          ),
        ),
      );
    });

    on<_FetchCustomerAccounts>((event, emit) async {
      print("userid is${event.customerId}");
      emit(
        state.copyWith(
          customerAccountsLoading: true,
          sdaccountdetailsFailureorSuccess: none(),
          goldLoandetailsFailureorSuccess: none(),
          rddetailsFailureorSuccess: none(),
          customerAccountSuccessOrfailOption: none(),
          customerOtherBankSuccessOrfailOption: none(),
          customerNotificationSuccessOrfailOption: none(),
          customerProfileSuccessOrfailOption: none(),
          customerScheduledTransactionSuccessOrfailOption: none(),
          customerStatementSuccessOrfailOption: none(),
          customerStatementTransactionsSuccessOrfailOption: none(),
          settlementDetailsFailureOrSuccess: none(),
          settlementFailureOrSuccess: none(),
          removeScheduledTransactionFailureOrSuccess: none(),
          availableSchemeFailureOrSuccess: none(),
          depositFailureOrSuccess: none(),
          customerPaymentSuccessOrfailOption: none(),
          withdrawalPostFailureOrSuccess: none(),
          removeCustomerNotificationFailureOrSuccess: none(),
          newSdPostFailureOrSuccess: none(),
          validateSalescodeFailureOrSuccess: none(),
          ifscCodeFailureOrSuccess: none(),
          customerBankFailureOrSuccess: none(),
          accountMoreInfoFailureOrSuccess: none(),
          coApplicantRightsFailureOrSuccess: none(),
          nomineeRelationFailureOrSuccess: none(),
        ),
      );

      final Either<CustomerFailure, List<CustomerAccountsModel>>
          customerAccountsOption =
          await iCustomerRepo.getCustomerAccountCardsDetails(
        customerId: event.customerId,
        loginToken: state.loginToken,
      );
      emit(
        customerAccountsOption.fold(
          (failure) => state.copyWith(
            customerAccountsLoading: false,
            customerAccountSuccessOrfailOption: Some(Left(failure)),
            sdaccountdetailsFailureorSuccess: none(),
            goldLoandetailsFailureorSuccess: none(),
            rddetailsFailureorSuccess: none(),
            customerOtherBankSuccessOrfailOption: none(),
            customerNotificationSuccessOrfailOption: none(),
            customerProfileSuccessOrfailOption: none(),
            customerScheduledTransactionSuccessOrfailOption: none(),
            customerStatementSuccessOrfailOption: none(),
            customerStatementTransactionsSuccessOrfailOption: none(),
            settlementDetailsFailureOrSuccess: none(),
            settlementFailureOrSuccess: none(),
            removeScheduledTransactionFailureOrSuccess: none(),
            availableSchemeFailureOrSuccess: none(),
            depositFailureOrSuccess: none(),
            customerPaymentSuccessOrfailOption: none(),
            withdrawalPostFailureOrSuccess: none(),
            removeCustomerNotificationFailureOrSuccess: none(),
            newSdPostFailureOrSuccess: none(),
            validateSalescodeFailureOrSuccess: none(),
            ifscCodeFailureOrSuccess: none(),
            customerBankFailureOrSuccess: none(),
            coApplicantRightsFailureOrSuccess: none(),
            nomineeRelationFailureOrSuccess: none(),
            accountMoreInfoFailureOrSuccess: none(),
          ),
          (success) => state.copyWith(
            customerAccountsLoading: false,
            customerAccountSuccessOrfailOption: Some(
              Right(success),
            ),
            sdaccountdetailsFailureorSuccess: none(),
            goldLoandetailsFailureorSuccess: none(),
            rddetailsFailureorSuccess: none(),
            customerOtherBankSuccessOrfailOption: none(),
            customerNotificationSuccessOrfailOption: none(),
            customerProfileSuccessOrfailOption: none(),
            customerScheduledTransactionSuccessOrfailOption: none(),
            customerStatementSuccessOrfailOption: none(),
            customerStatementTransactionsSuccessOrfailOption: none(),
            settlementDetailsFailureOrSuccess: none(),
            settlementFailureOrSuccess: none(),
            removeScheduledTransactionFailureOrSuccess: none(),
            availableSchemeFailureOrSuccess: none(),
            depositFailureOrSuccess: none(),
            customerPaymentSuccessOrfailOption: none(),
            withdrawalPostFailureOrSuccess: none(),
            removeCustomerNotificationFailureOrSuccess: none(),
            newSdPostFailureOrSuccess: none(),
            validateSalescodeFailureOrSuccess: none(),
            ifscCodeFailureOrSuccess: none(),
            customerBankFailureOrSuccess: none(),
            coApplicantRightsFailureOrSuccess: none(),
            nomineeRelationFailureOrSuccess: none(),
            accountMoreInfoFailureOrSuccess: none(),
            customerAccounts: success,
            customerActiveAccounts: success.where((e) {
              return e.status == 1;
            }).toList(),
          ),
        ),
      );
    });

    on<_SaveCustomerStatementSelectedDate>((event, emit) {
      emit(state.copyWith(
          sdaccountdetailsFailureorSuccess: none(),
          goldLoandetailsFailureorSuccess: none(),
          rddetailsFailureorSuccess: none(),
          customerAccountSuccessOrfailOption: none(),
          customerOtherBankSuccessOrfailOption: none(),
          customerNotificationSuccessOrfailOption: none(),
          customerProfileSuccessOrfailOption: none(),
          customerScheduledTransactionSuccessOrfailOption: none(),
          customerStatementSuccessOrfailOption: none(),
          customerStatementTransactionsSuccessOrfailOption: none(),
          settlementDetailsFailureOrSuccess: none(),
          settlementFailureOrSuccess: none(),
          removeScheduledTransactionFailureOrSuccess: none(),
          availableSchemeFailureOrSuccess: none(),
          depositFailureOrSuccess: none(),
          customerPaymentSuccessOrfailOption: none(),
          withdrawalPostFailureOrSuccess: none(),
          removeCustomerNotificationFailureOrSuccess: none(),
          newSdPostFailureOrSuccess: none(),
          validateSalescodeFailureOrSuccess: none(),
          ifscCodeFailureOrSuccess: none(),
          customerBankFailureOrSuccess: none(),
          coApplicantRightsFailureOrSuccess: none(),
          nomineeRelationFailureOrSuccess: none(),
          accountMoreInfoFailureOrSuccess: none(),
          customerStatementSelectedDate: CustomerStatementSelectedDate(
              fromDate: event.fromDate, toDate: event.toDate)));
    });

    on<_FetchAccountMoreInfo>((event, emit) async {
      emit(
        state.copyWith(
          accountMoreInfoLoading: true,
          sdaccountdetailsFailureorSuccess: none(),
          goldLoandetailsFailureorSuccess: none(),
          rddetailsFailureorSuccess: none(),
          customerAccountSuccessOrfailOption: none(),
          customerOtherBankSuccessOrfailOption: none(),
          customerNotificationSuccessOrfailOption: none(),
          customerProfileSuccessOrfailOption: none(),
          customerScheduledTransactionSuccessOrfailOption: none(),
          customerStatementSuccessOrfailOption: none(),
          customerStatementTransactionsSuccessOrfailOption: none(),
          settlementDetailsFailureOrSuccess: none(),
          settlementFailureOrSuccess: none(),
          removeScheduledTransactionFailureOrSuccess: none(),
          availableSchemeFailureOrSuccess: none(),
          depositFailureOrSuccess: none(),
          customerPaymentSuccessOrfailOption: none(),
          withdrawalPostFailureOrSuccess: none(),
          removeCustomerNotificationFailureOrSuccess: none(),
          newSdPostFailureOrSuccess: none(),
          validateSalescodeFailureOrSuccess: none(),
          ifscCodeFailureOrSuccess: none(),
          customerBankFailureOrSuccess: none(),
          coApplicantRightsFailureOrSuccess: none(),
          nomineeRelationFailureOrSuccess: none(),
          accountMoreInfoFailureOrSuccess: none(),
        ),
      );

      final Either<CustomerFailure, AccountMoreInfoModel>
          accountMoreInfoOption = await iCustomerRepo.fetchAccountMoreInfo(
        depositId: event.depositId,
        loginToken: state.loginToken,
      );
      emit(accountMoreInfoOption.fold((failure) {
        return state.copyWith(
          accountMoreInfoLoading: false,
          sdaccountdetailsFailureorSuccess: none(),
          goldLoandetailsFailureorSuccess: none(),
          rddetailsFailureorSuccess: none(),
          customerAccountSuccessOrfailOption: none(),
          customerOtherBankSuccessOrfailOption: none(),
          customerNotificationSuccessOrfailOption: none(),
          customerProfileSuccessOrfailOption: none(),
          customerScheduledTransactionSuccessOrfailOption: none(),
          customerStatementSuccessOrfailOption: none(),
          customerStatementTransactionsSuccessOrfailOption: none(),
          settlementDetailsFailureOrSuccess: none(),
          settlementFailureOrSuccess: none(),
          removeScheduledTransactionFailureOrSuccess: none(),
          availableSchemeFailureOrSuccess: none(),
          depositFailureOrSuccess: none(),
          customerPaymentSuccessOrfailOption: none(),
          withdrawalPostFailureOrSuccess: none(),
          removeCustomerNotificationFailureOrSuccess: none(),
          newSdPostFailureOrSuccess: none(),
          validateSalescodeFailureOrSuccess: none(),
          ifscCodeFailureOrSuccess: none(),
          customerBankFailureOrSuccess: none(),
          coApplicantRightsFailureOrSuccess: none(),
          nomineeRelationFailureOrSuccess: none(),
          accountMoreInfoFailureOrSuccess: Some(Left(failure)),
        );
      }, (success) {
        return state.copyWith(
          accountMoreInfoLoading: false,
          sdaccountdetailsFailureorSuccess: none(),
          goldLoandetailsFailureorSuccess: none(),
          rddetailsFailureorSuccess: none(),
          customerAccountSuccessOrfailOption: none(),
          customerOtherBankSuccessOrfailOption: none(),
          customerNotificationSuccessOrfailOption: none(),
          customerProfileSuccessOrfailOption: none(),
          customerScheduledTransactionSuccessOrfailOption: none(),
          customerStatementSuccessOrfailOption: none(),
          customerStatementTransactionsSuccessOrfailOption: none(),
          settlementDetailsFailureOrSuccess: none(),
          settlementFailureOrSuccess: none(),
          removeScheduledTransactionFailureOrSuccess: none(),
          availableSchemeFailureOrSuccess: none(),
          depositFailureOrSuccess: none(),
          customerPaymentSuccessOrfailOption: none(),
          withdrawalPostFailureOrSuccess: none(),
          removeCustomerNotificationFailureOrSuccess: none(),
          newSdPostFailureOrSuccess: none(),
          validateSalescodeFailureOrSuccess: none(),
          ifscCodeFailureOrSuccess: none(),
          customerBankFailureOrSuccess: none(),
          coApplicantRightsFailureOrSuccess: none(),
          nomineeRelationFailureOrSuccess: none(),
          accountMoreInfoFailureOrSuccess: Some(Right(success)),
          accountMoreInfo: success,
        );
      }));
    });

    on<_FetchCustomerNotifications>((event, emit) async {
      emit(
        state.copyWith(
          customerNotificationLoading: true,
          sdaccountdetailsFailureorSuccess: none(),
          goldLoandetailsFailureorSuccess: none(),
          rddetailsFailureorSuccess: none(),
          customerAccountSuccessOrfailOption: none(),
          customerOtherBankSuccessOrfailOption: none(),
          customerNotificationSuccessOrfailOption: none(),
          customerProfileSuccessOrfailOption: none(),
          customerScheduledTransactionSuccessOrfailOption: none(),
          customerStatementSuccessOrfailOption: none(),
          customerStatementTransactionsSuccessOrfailOption: none(),
          settlementDetailsFailureOrSuccess: none(),
          settlementFailureOrSuccess: none(),
          removeScheduledTransactionFailureOrSuccess: none(),
          availableSchemeFailureOrSuccess: none(),
          depositFailureOrSuccess: none(),
          customerPaymentSuccessOrfailOption: none(),
          withdrawalPostFailureOrSuccess: none(),
          removeCustomerNotificationFailureOrSuccess: none(),
          newSdPostFailureOrSuccess: none(),
          validateSalescodeFailureOrSuccess: none(),
          ifscCodeFailureOrSuccess: none(),
          customerBankFailureOrSuccess: none(),
          coApplicantRightsFailureOrSuccess: none(),
          nomineeRelationFailureOrSuccess: none(),
          accountMoreInfoFailureOrSuccess: none(),
        ),
      );
      state.customerNotification!.clear();
      Either<CustomerFailure, List<CustomerNotificationModel>>
          customerNotificationsOption =
          await iCustomerRepo.getCustomertNotificationDetails(
              customerId: event.customerId, loginToken: state.loginToken);
      emit(
        customerNotificationsOption.fold(
          (failure) => state.copyWith(
            customerNotificationLoading: false,
            sdaccountdetailsFailureorSuccess: none(),
            goldLoandetailsFailureorSuccess: none(),
            rddetailsFailureorSuccess: none(),
            customerAccountSuccessOrfailOption: none(),
            customerOtherBankSuccessOrfailOption: none(),
            customerProfileSuccessOrfailOption: none(),
            customerScheduledTransactionSuccessOrfailOption: none(),
            customerStatementSuccessOrfailOption: none(),
            customerStatementTransactionsSuccessOrfailOption: none(),
            settlementDetailsFailureOrSuccess: none(),
            settlementFailureOrSuccess: none(),
            removeScheduledTransactionFailureOrSuccess: none(),
            availableSchemeFailureOrSuccess: none(),
            depositFailureOrSuccess: none(),
            customerPaymentSuccessOrfailOption: none(),
            withdrawalPostFailureOrSuccess: none(),
            removeCustomerNotificationFailureOrSuccess: none(),
            newSdPostFailureOrSuccess: none(),
            validateSalescodeFailureOrSuccess: none(),
            ifscCodeFailureOrSuccess: none(),
            customerBankFailureOrSuccess: none(),
            coApplicantRightsFailureOrSuccess: none(),
            nomineeRelationFailureOrSuccess: none(),
            accountMoreInfoFailureOrSuccess: none(),
            customerNotificationSuccessOrfailOption: Some(Left(failure)),
          ),
          (success) => state.copyWith(
            customerNotificationLoading: false,
            sdaccountdetailsFailureorSuccess: none(),
            goldLoandetailsFailureorSuccess: none(),
            rddetailsFailureorSuccess: none(),
            customerNotificationSuccessOrfailOption: Some(Right(success)),
            customerAccountSuccessOrfailOption: none(),
            customerOtherBankSuccessOrfailOption: none(),
            customerProfileSuccessOrfailOption: none(),
            customerScheduledTransactionSuccessOrfailOption: none(),
            customerStatementSuccessOrfailOption: none(),
            customerStatementTransactionsSuccessOrfailOption: none(),
            settlementDetailsFailureOrSuccess: none(),
            settlementFailureOrSuccess: none(),
            removeScheduledTransactionFailureOrSuccess: none(),
            availableSchemeFailureOrSuccess: none(),
            depositFailureOrSuccess: none(),
            customerPaymentSuccessOrfailOption: none(),
            withdrawalPostFailureOrSuccess: none(),
            removeCustomerNotificationFailureOrSuccess: none(),
            newSdPostFailureOrSuccess: none(),
            validateSalescodeFailureOrSuccess: none(),
            ifscCodeFailureOrSuccess: none(),
            customerBankFailureOrSuccess: none(),
            coApplicantRightsFailureOrSuccess: none(),
            nomineeRelationFailureOrSuccess: none(),
            accountMoreInfoFailureOrSuccess: none(),
            customerNotification: success,
          ),
        ),
      );
    });
    on<_FetchCustomerScheduledTransactions>((event, emit) async {
      emit(
        state.copyWith(
          customerScheduledTRansactionLoading: true,
          sdaccountdetailsFailureorSuccess: none(),
          goldLoandetailsFailureorSuccess: none(),
          rddetailsFailureorSuccess: none(),
          customerAccountSuccessOrfailOption: none(),
          customerOtherBankSuccessOrfailOption: none(),
          customerNotificationSuccessOrfailOption: none(),
          customerProfileSuccessOrfailOption: none(),
          customerScheduledTransactionSuccessOrfailOption: none(),
          customerStatementSuccessOrfailOption: none(),
          customerStatementTransactionsSuccessOrfailOption: none(),
          settlementDetailsFailureOrSuccess: none(),
          settlementFailureOrSuccess: none(),
          removeScheduledTransactionFailureOrSuccess: none(),
          availableSchemeFailureOrSuccess: none(),
          depositFailureOrSuccess: none(),
          customerPaymentSuccessOrfailOption: none(),
          withdrawalPostFailureOrSuccess: none(),
          removeCustomerNotificationFailureOrSuccess: none(),
          newSdPostFailureOrSuccess: none(),
          validateSalescodeFailureOrSuccess: none(),
          ifscCodeFailureOrSuccess: none(),
          customerBankFailureOrSuccess: none(),
          coApplicantRightsFailureOrSuccess: none(),
          nomineeRelationFailureOrSuccess: none(),
          ////////////////////////////////////      /////////////////////////////////////////////////////////////////
          accountMoreInfoFailureOrSuccess: none(),
        ),
      );
      state.customerScheduleTransaction!.clear();
      Either<CustomerFailure, List<CustomerScheduleTransactionModel>>
          customerScheduledTransactionOption =
          await iCustomerRepo.getCustomerScheduledTransactionDetails(
              customerId: event.customerId, loginToken: state.loginToken);
      emit(
        customerScheduledTransactionOption.fold(
          (failure) => state.copyWith(
            customerScheduledTRansactionLoading: false,
            sdaccountdetailsFailureorSuccess: none(),
            goldLoandetailsFailureorSuccess: none(),
            rddetailsFailureorSuccess: none(),
            customerAccountSuccessOrfailOption: none(),
            customerOtherBankSuccessOrfailOption: none(),
            customerNotificationSuccessOrfailOption: none(),
            customerProfileSuccessOrfailOption: none(),
            customerStatementSuccessOrfailOption: none(),
            customerStatementTransactionsSuccessOrfailOption: none(),
            settlementDetailsFailureOrSuccess: none(),
            settlementFailureOrSuccess: none(),
            removeScheduledTransactionFailureOrSuccess: none(),
            availableSchemeFailureOrSuccess: none(),
            depositFailureOrSuccess: none(),
            customerPaymentSuccessOrfailOption: none(),
            withdrawalPostFailureOrSuccess: none(),
            removeCustomerNotificationFailureOrSuccess: none(),
            newSdPostFailureOrSuccess: none(),
            validateSalescodeFailureOrSuccess: none(),
            ifscCodeFailureOrSuccess: none(),
            customerBankFailureOrSuccess: none(),
            coApplicantRightsFailureOrSuccess: none(),
            nomineeRelationFailureOrSuccess: none(),
            customerScheduledTransactionSuccessOrfailOption:
                Some(Left(failure)),
            accountMoreInfoFailureOrSuccess: none(),
          ),
          (success) => state.copyWith(
            customerScheduledTRansactionLoading: false,
            sdaccountdetailsFailureorSuccess: none(),
            goldLoandetailsFailureorSuccess: none(),
            rddetailsFailureorSuccess: none(),
            customerAccountSuccessOrfailOption: none(),
            customerOtherBankSuccessOrfailOption: none(),
            customerNotificationSuccessOrfailOption: none(),
            customerProfileSuccessOrfailOption: none(),
            customerStatementSuccessOrfailOption: none(),
            customerStatementTransactionsSuccessOrfailOption: none(),
            settlementDetailsFailureOrSuccess: none(),
            settlementFailureOrSuccess: none(),
            removeScheduledTransactionFailureOrSuccess: none(),
            availableSchemeFailureOrSuccess: none(),
            depositFailureOrSuccess: none(),
            customerPaymentSuccessOrfailOption: none(),
            withdrawalPostFailureOrSuccess: none(),
            removeCustomerNotificationFailureOrSuccess: none(),
            newSdPostFailureOrSuccess: none(),
            validateSalescodeFailureOrSuccess: none(),
            ifscCodeFailureOrSuccess: none(),
            customerBankFailureOrSuccess: none(),
            coApplicantRightsFailureOrSuccess: none(),
            nomineeRelationFailureOrSuccess: none(),
            customerScheduledTransactionSuccessOrfailOption: Some(
              Right(success),
            ),
            accountMoreInfoFailureOrSuccess: none(),
            customerScheduleTransaction: success,
          ),
        ),
      );
    });
    // on<_DropDownEvent>((event, emit) {
    //   emit(state.copyWith(dropDownLabel: event.value));
    // });

    on<_StatementAccountDetails>((event, emit) async {
      emit(state.copyWith(
        customerStatementDetailsLoading: false,
        sdaccountdetailsFailureorSuccess: none(),
        goldLoandetailsFailureorSuccess: none(),
        rddetailsFailureorSuccess: none(),
        customerAccountSuccessOrfailOption: none(),
        customerOtherBankSuccessOrfailOption: none(),
        customerNotificationSuccessOrfailOption: none(),
        customerProfileSuccessOrfailOption: none(),
        customerScheduledTransactionSuccessOrfailOption: none(),
        customerStatementSuccessOrfailOption: none(),
        customerStatementTransactionsSuccessOrfailOption: none(),
        settlementDetailsFailureOrSuccess: none(),
        settlementFailureOrSuccess: none(),
        removeScheduledTransactionFailureOrSuccess: none(),
        availableSchemeFailureOrSuccess: none(),
        depositFailureOrSuccess: none(),
        customerPaymentSuccessOrfailOption: none(),
        withdrawalPostFailureOrSuccess: none(),
        removeCustomerNotificationFailureOrSuccess: none(),
        newSdPostFailureOrSuccess: none(),
        validateSalescodeFailureOrSuccess: none(),
        ifscCodeFailureOrSuccess: none(),
        customerBankFailureOrSuccess: none(),
        coApplicantRightsFailureOrSuccess: none(),
        nomineeRelationFailureOrSuccess: none(),
        accountMoreInfoFailureOrSuccess: none(),
      ));
      final Either<MainFailure, CustomerStatementDetails>
          customerStatementDetailsOption =
          await CustomerStatementRepo().getCustomerStatementDetails(
        accountNumber: event.accountNumber,
        customerId: event.customerId,
        fromDate: event.fromDate,
        toDate: event.toDate,
        loginToken: state.loginToken,
      );
      emit(customerStatementDetailsOption.fold((failure) {
        return state.copyWith(
          sdaccountdetailsFailureorSuccess: none(),
          goldLoandetailsFailureorSuccess: none(),
          rddetailsFailureorSuccess: none(),
          customerAccountSuccessOrfailOption: none(),
          customerOtherBankSuccessOrfailOption: none(),
          customerNotificationSuccessOrfailOption: none(),
          customerProfileSuccessOrfailOption: none(),
          customerScheduledTransactionSuccessOrfailOption: none(),
          customerStatementTransactionsSuccessOrfailOption: none(),
          settlementDetailsFailureOrSuccess: none(),
          settlementFailureOrSuccess: none(),
          removeScheduledTransactionFailureOrSuccess: none(),
          availableSchemeFailureOrSuccess: none(),
          depositFailureOrSuccess: none(),
          customerPaymentSuccessOrfailOption: none(),
          withdrawalPostFailureOrSuccess: none(),
          removeCustomerNotificationFailureOrSuccess: none(),
          newSdPostFailureOrSuccess: none(),
          validateSalescodeFailureOrSuccess: none(),
          ifscCodeFailureOrSuccess: none(),
          customerBankFailureOrSuccess: none(),
          coApplicantRightsFailureOrSuccess: none(),
          nomineeRelationFailureOrSuccess: none(),
          customerStatementDetailsLoading: false,
          customerStatementSuccessOrfailOption: Some(Left(failure)),
          accountMoreInfoFailureOrSuccess: none(),
        );
      }, (success) {
        return state.copyWith(
          sdaccountdetailsFailureorSuccess: none(),
          goldLoandetailsFailureorSuccess: none(),
          rddetailsFailureorSuccess: none(),
          customerAccountSuccessOrfailOption: none(),
          customerOtherBankSuccessOrfailOption: none(),
          customerNotificationSuccessOrfailOption: none(),
          customerProfileSuccessOrfailOption: none(),
          customerScheduledTransactionSuccessOrfailOption: none(),
          customerStatementTransactionsSuccessOrfailOption: none(),
          settlementDetailsFailureOrSuccess: none(),
          settlementFailureOrSuccess: none(),
          removeScheduledTransactionFailureOrSuccess: none(),
          availableSchemeFailureOrSuccess: none(),
          depositFailureOrSuccess: none(),
          customerPaymentSuccessOrfailOption: none(),
          withdrawalPostFailureOrSuccess: none(),
          removeCustomerNotificationFailureOrSuccess: none(),
          newSdPostFailureOrSuccess: none(),
          validateSalescodeFailureOrSuccess: none(),
          ifscCodeFailureOrSuccess: none(),
          customerBankFailureOrSuccess: none(),
          coApplicantRightsFailureOrSuccess: none(),
          nomineeRelationFailureOrSuccess: none(),
          customerStatementDetailsLoading: false,
          customerStatementSuccessOrfailOption: Some(Right(success)),
          accountMoreInfoFailureOrSuccess: none(),
          customerStatementDetails: success,
        );
      }));
    });
    on<_StatementTransactions>((event, emit) async {
      emit(state.copyWith(
        customerStatementTransactionsLoading: true,
        sdaccountdetailsFailureorSuccess: none(),
        goldLoandetailsFailureorSuccess: none(),
        rddetailsFailureorSuccess: none(),
        customerAccountSuccessOrfailOption: none(),
        customerOtherBankSuccessOrfailOption: none(),
        customerNotificationSuccessOrfailOption: none(),
        customerProfileSuccessOrfailOption: none(),
        customerScheduledTransactionSuccessOrfailOption: none(),
        customerStatementSuccessOrfailOption: none(),
        customerStatementTransactionsSuccessOrfailOption: none(),
        settlementDetailsFailureOrSuccess: none(),
        settlementFailureOrSuccess: none(),
        removeScheduledTransactionFailureOrSuccess: none(),
        availableSchemeFailureOrSuccess: none(),
        depositFailureOrSuccess: none(),
        customerPaymentSuccessOrfailOption: none(),
        withdrawalPostFailureOrSuccess: none(),
        removeCustomerNotificationFailureOrSuccess: none(),
        newSdPostFailureOrSuccess: none(),
        validateSalescodeFailureOrSuccess: none(),
        ifscCodeFailureOrSuccess: none(),
        customerBankFailureOrSuccess: none(),
        coApplicantRightsFailureOrSuccess: none(),
        nomineeRelationFailureOrSuccess: none(),
        accountMoreInfoFailureOrSuccess: none(),
        customerStatementTransactions: [],
      ));
      state.customerStatementTransactions != [];
      final Either<MainFailure, List<CustomerStatementTransactions>>
          customerStatementTransactionsOption =
          await CustomerStatementRepo().getCustomerStatementTransactions(
        customerId: event.customerId,
        accountNumber: event.accountNumber,
        fromDate: event.fromDate,
        toDate: event.toDate,
        loginToken: state.loginToken,
      );
      emit(
        customerStatementTransactionsOption.fold(
          (failure) => state.copyWith(
              sdaccountdetailsFailureorSuccess: none(),
              goldLoandetailsFailureorSuccess: none(),
              rddetailsFailureorSuccess: none(),
              customerAccountSuccessOrfailOption: none(),
              customerOtherBankSuccessOrfailOption: none(),
              customerNotificationSuccessOrfailOption: none(),
              customerProfileSuccessOrfailOption: none(),
              customerScheduledTransactionSuccessOrfailOption: none(),
              customerStatementSuccessOrfailOption: none(),
              settlementDetailsFailureOrSuccess: none(),
              settlementFailureOrSuccess: none(),
              removeScheduledTransactionFailureOrSuccess: none(),
              availableSchemeFailureOrSuccess: none(),
              depositFailureOrSuccess: none(),
              customerPaymentSuccessOrfailOption: none(),
              withdrawalPostFailureOrSuccess: none(),
              removeCustomerNotificationFailureOrSuccess: none(),
              newSdPostFailureOrSuccess: none(),
              validateSalescodeFailureOrSuccess: none(),
              ifscCodeFailureOrSuccess: none(),
              customerBankFailureOrSuccess: none(),
              coApplicantRightsFailureOrSuccess: none(),
              nomineeRelationFailureOrSuccess: none(),
              accountMoreInfoFailureOrSuccess: none(),
              customerStatementTransactionsLoading: false,
              customerStatementTransactionsSuccessOrfailOption:
                  Some(Left(failure))),
          (success) => state.copyWith(
            sdaccountdetailsFailureorSuccess: none(),
            goldLoandetailsFailureorSuccess: none(),
            rddetailsFailureorSuccess: none(),
            customerAccountSuccessOrfailOption: none(),
            customerOtherBankSuccessOrfailOption: none(),
            customerNotificationSuccessOrfailOption: none(),
            customerProfileSuccessOrfailOption: none(),
            customerScheduledTransactionSuccessOrfailOption: none(),
            customerStatementSuccessOrfailOption: none(),
            settlementDetailsFailureOrSuccess: none(),
            settlementFailureOrSuccess: none(),
            removeScheduledTransactionFailureOrSuccess: none(),
            availableSchemeFailureOrSuccess: none(),
            depositFailureOrSuccess: none(),
            customerPaymentSuccessOrfailOption: none(),
            withdrawalPostFailureOrSuccess: none(),
            removeCustomerNotificationFailureOrSuccess: none(),
            newSdPostFailureOrSuccess: none(),
            validateSalescodeFailureOrSuccess: none(),
            ifscCodeFailureOrSuccess: none(),
            customerBankFailureOrSuccess: none(),
            coApplicantRightsFailureOrSuccess: none(),
            nomineeRelationFailureOrSuccess: none(),
            accountMoreInfoFailureOrSuccess: none(),
            customerStatementTransactionsLoading: false,
            customerStatementTransactionsSuccessOrfailOption: Some(
              Right(success),
            ),
            customerStatementTransactions: success,
          ),
        ),
      );
    });

    on<_StoreUpdatedStatementTransactions>((event, emit) {
      emit(state.copyWith(
        sdaccountdetailsFailureorSuccess: none(),
        goldLoandetailsFailureorSuccess: none(),
        rddetailsFailureorSuccess: none(),
        customerAccountSuccessOrfailOption: none(),
        customerOtherBankSuccessOrfailOption: none(),
        customerNotificationSuccessOrfailOption: none(),
        customerProfileSuccessOrfailOption: none(),
        customerScheduledTransactionSuccessOrfailOption: none(),
        customerStatementSuccessOrfailOption: none(),
        customerStatementTransactionsSuccessOrfailOption: none(),
        settlementDetailsFailureOrSuccess: none(),
        settlementFailureOrSuccess: none(),
        removeScheduledTransactionFailureOrSuccess: none(),
        availableSchemeFailureOrSuccess: none(),
        depositFailureOrSuccess: none(),
        customerPaymentSuccessOrfailOption: none(),
        withdrawalPostFailureOrSuccess: none(),
        removeCustomerNotificationFailureOrSuccess: none(),
        newSdPostFailureOrSuccess: none(),
        validateSalescodeFailureOrSuccess: none(),
        ifscCodeFailureOrSuccess: none(),
        customerBankFailureOrSuccess: none(),
        coApplicantRightsFailureOrSuccess: none(),
        nomineeRelationFailureOrSuccess: none(),
        accountMoreInfoFailureOrSuccess: none(),
        updatedCustomerStatementTransaction:
            event.updatedCustomerStatementTransaction,
        creditTotal: event.creditTotal,
        debitTotal: event.debitTotal,
      ));
    });

    /////////////settlement//////////////////////////////////////////////

    on<_CheckboxSelectedCash>((event, emit) async {
      bool? checkbox;
      if (event.setCheckboxValue == true) {
        checkbox = true;
      }
      if (event.setCheckboxValue == false) {
        checkbox = false;
      }
      emit(state.copyWith(
        checkboxSelectionCash: checkbox ?? !state.checkboxSelectionCash,
        sdaccountdetailsFailureorSuccess: none(),
        goldLoandetailsFailureorSuccess: none(),
        rddetailsFailureorSuccess: none(),
        customerAccountSuccessOrfailOption: none(),
        customerOtherBankSuccessOrfailOption: none(),
        customerNotificationSuccessOrfailOption: none(),
        customerProfileSuccessOrfailOption: none(),
        customerScheduledTransactionSuccessOrfailOption: none(),
        customerStatementSuccessOrfailOption: none(),
        customerStatementTransactionsSuccessOrfailOption: none(),
        settlementDetailsFailureOrSuccess: none(),
        settlementFailureOrSuccess: none(),
        removeScheduledTransactionFailureOrSuccess: none(),
        availableSchemeFailureOrSuccess: none(),
        depositFailureOrSuccess: none(),
        customerPaymentSuccessOrfailOption: none(),
        withdrawalPostFailureOrSuccess: none(),
        removeCustomerNotificationFailureOrSuccess: none(),
        newSdPostFailureOrSuccess: none(),
        validateSalescodeFailureOrSuccess: none(),
        ifscCodeFailureOrSuccess: none(),
        customerBankFailureOrSuccess: none(),
        coApplicantRightsFailureOrSuccess: none(),
        accountMoreInfoFailureOrSuccess: none(),
        nomineeRelationFailureOrSuccess: none(),
      ));
    });

    on<_SettleCustomer>((event, emit) async {
      emit(state.copyWith(
        sdaccountdetailsFailureorSuccess: none(),
        goldLoandetailsFailureorSuccess: none(),
        rddetailsFailureorSuccess: none(),
        customerAccountSuccessOrfailOption: none(),
        customerOtherBankSuccessOrfailOption: none(),
        customerNotificationSuccessOrfailOption: none(),
        customerProfileSuccessOrfailOption: none(),
        customerScheduledTransactionSuccessOrfailOption: none(),
        customerStatementSuccessOrfailOption: none(),
        customerStatementTransactionsSuccessOrfailOption: none(),
        settlementDetailsFailureOrSuccess: none(),
        settlementFailureOrSuccess: none(),
        removeScheduledTransactionFailureOrSuccess: none(),
        availableSchemeFailureOrSuccess: none(),
        depositFailureOrSuccess: none(),
        customerPaymentSuccessOrfailOption: none(),
        withdrawalPostFailureOrSuccess: none(),
        removeCustomerNotificationFailureOrSuccess: none(),
        newSdPostFailureOrSuccess: none(),
        validateSalescodeFailureOrSuccess: none(),
        ifscCodeFailureOrSuccess: none(),
        customerBankFailureOrSuccess: none(),
        coApplicantRightsFailureOrSuccess: none(),
        nomineeRelationFailureOrSuccess: none(),
        accountMoreInfoFailureOrSuccess: none(),
        customerSettlementLoading: false,
      ));
      final Either<MainFailure, Unit> settlementDetails =
          await iSettlementRepo.putSettlement(
              customerId: event.customerId, accountNumber: event.accountNumber);
      emit(
        settlementDetails.fold(
          (failure) => state.copyWith(
            sdaccountdetailsFailureorSuccess: none(),
            goldLoandetailsFailureorSuccess: none(),
            rddetailsFailureorSuccess: none(),
            customerAccountSuccessOrfailOption: none(),
            customerOtherBankSuccessOrfailOption: none(),
            customerNotificationSuccessOrfailOption: none(),
            customerProfileSuccessOrfailOption: none(),
            customerScheduledTransactionSuccessOrfailOption: none(),
            customerStatementSuccessOrfailOption: none(),
            customerStatementTransactionsSuccessOrfailOption: none(),
            settlementDetailsFailureOrSuccess: none(),
            removeScheduledTransactionFailureOrSuccess: none(),
            availableSchemeFailureOrSuccess: none(),
            depositFailureOrSuccess: none(),
            customerPaymentSuccessOrfailOption: none(),
            withdrawalPostFailureOrSuccess: none(),
            removeCustomerNotificationFailureOrSuccess: none(),
            newSdPostFailureOrSuccess: none(),
            validateSalescodeFailureOrSuccess: none(),
            ifscCodeFailureOrSuccess: none(),
            customerBankFailureOrSuccess: none(),
            coApplicantRightsFailureOrSuccess: none(),
            nomineeRelationFailureOrSuccess: none(),
            accountMoreInfoFailureOrSuccess: none(),
            customerSettlementLoading: false,
            settlementFailureOrSuccess: Some(Left(failure)),
          ),
          (success) => state.copyWith(
            sdaccountdetailsFailureorSuccess: none(),
            goldLoandetailsFailureorSuccess: none(),
            rddetailsFailureorSuccess: none(),
            customerAccountSuccessOrfailOption: none(),
            customerOtherBankSuccessOrfailOption: none(),
            customerNotificationSuccessOrfailOption: none(),
            customerProfileSuccessOrfailOption: none(),
            customerScheduledTransactionSuccessOrfailOption: none(),
            customerStatementSuccessOrfailOption: none(),
            customerStatementTransactionsSuccessOrfailOption: none(),
            settlementDetailsFailureOrSuccess: none(),
            removeScheduledTransactionFailureOrSuccess: none(),
            availableSchemeFailureOrSuccess: none(),
            depositFailureOrSuccess: none(),
            customerPaymentSuccessOrfailOption: none(),
            withdrawalPostFailureOrSuccess: none(),
            removeCustomerNotificationFailureOrSuccess: none(),
            newSdPostFailureOrSuccess: none(),
            validateSalescodeFailureOrSuccess: none(),
            ifscCodeFailureOrSuccess: none(),
            customerBankFailureOrSuccess: none(),
            coApplicantRightsFailureOrSuccess: none(),
            nomineeRelationFailureOrSuccess: none(),
            accountMoreInfoFailureOrSuccess: none(),
            customerSettlementLoading: false,
            settlementFailureOrSuccess: Some(
              Right(success),
            ),
          ),
        ),
      );
    });

    on<_GetSettlementDetails>((event, emit) async {
      emit(state.copyWith(
        customerSettlementLoading: true,
        sdaccountdetailsFailureorSuccess: none(),
        goldLoandetailsFailureorSuccess: none(),
        rddetailsFailureorSuccess: none(),
        customerAccountSuccessOrfailOption: none(),
        customerOtherBankSuccessOrfailOption: none(),
        customerNotificationSuccessOrfailOption: none(),
        customerProfileSuccessOrfailOption: none(),
        customerScheduledTransactionSuccessOrfailOption: none(),
        customerStatementSuccessOrfailOption: none(),
        customerStatementTransactionsSuccessOrfailOption: none(),
        settlementDetailsFailureOrSuccess: none(),
        settlementFailureOrSuccess: none(),
        removeScheduledTransactionFailureOrSuccess: none(),
        availableSchemeFailureOrSuccess: none(),
        depositFailureOrSuccess: none(),
        customerPaymentSuccessOrfailOption: none(),
        withdrawalPostFailureOrSuccess: none(),
        removeCustomerNotificationFailureOrSuccess: none(),
        newSdPostFailureOrSuccess: none(),
        validateSalescodeFailureOrSuccess: none(),
        ifscCodeFailureOrSuccess: none(),
        customerBankFailureOrSuccess: none(),
        coApplicantRightsFailureOrSuccess: none(),
        nomineeRelationFailureOrSuccess: none(),
        accountMoreInfoFailureOrSuccess: none(),
      ));
      final Either<MainFailure, SettlementModel> settlementDetails =
          await iSettlementRepo.getSettlementDetails(
        customerId: event.customerId,
        accountNumber: event.accountNumber,
      );
      emit(
        settlementDetails.fold(
          (failure) => state.copyWith(
            sdaccountdetailsFailureorSuccess: none(),
            goldLoandetailsFailureorSuccess: none(),
            rddetailsFailureorSuccess: none(),
            customerAccountSuccessOrfailOption: none(),
            customerOtherBankSuccessOrfailOption: none(),
            customerNotificationSuccessOrfailOption: none(),
            customerProfileSuccessOrfailOption: none(),
            customerScheduledTransactionSuccessOrfailOption: none(),
            customerStatementSuccessOrfailOption: none(),
            customerStatementTransactionsSuccessOrfailOption: none(),
            settlementFailureOrSuccess: none(),
            removeScheduledTransactionFailureOrSuccess: none(),
            availableSchemeFailureOrSuccess: none(),
            depositFailureOrSuccess: none(),
            customerPaymentSuccessOrfailOption: none(),
            withdrawalPostFailureOrSuccess: none(),
            removeCustomerNotificationFailureOrSuccess: none(),
            newSdPostFailureOrSuccess: none(),
            validateSalescodeFailureOrSuccess: none(),
            ifscCodeFailureOrSuccess: none(),
            customerBankFailureOrSuccess: none(),
            coApplicantRightsFailureOrSuccess: none(),
            nomineeRelationFailureOrSuccess: none(),
            accountMoreInfoFailureOrSuccess: none(),
            customerSettlementLoading: false,
            settlementDetailsFailureOrSuccess: Some(Left(failure)),
          ),
          (success) => state.copyWith(
            sdaccountdetailsFailureorSuccess: none(),
            goldLoandetailsFailureorSuccess: none(),
            rddetailsFailureorSuccess: none(),
            customerAccountSuccessOrfailOption: none(),
            customerOtherBankSuccessOrfailOption: none(),
            customerNotificationSuccessOrfailOption: none(),
            customerProfileSuccessOrfailOption: none(),
            customerScheduledTransactionSuccessOrfailOption: none(),
            customerStatementSuccessOrfailOption: none(),
            customerStatementTransactionsSuccessOrfailOption: none(),
            settlementFailureOrSuccess: none(),
            removeScheduledTransactionFailureOrSuccess: none(),
            availableSchemeFailureOrSuccess: none(),
            depositFailureOrSuccess: none(),
            customerPaymentSuccessOrfailOption: none(),
            withdrawalPostFailureOrSuccess: none(),
            removeCustomerNotificationFailureOrSuccess: none(),
            newSdPostFailureOrSuccess: none(),
            validateSalescodeFailureOrSuccess: none(),
            ifscCodeFailureOrSuccess: none(),
            customerBankFailureOrSuccess: none(),
            coApplicantRightsFailureOrSuccess: none(),
            nomineeRelationFailureOrSuccess: none(),
            accountMoreInfoFailureOrSuccess: none(),
            customerSettlementLoading: false,
            settlementDetailsFailureOrSuccess: Some(
              Right(success),
            ),
            settlementDetails: success,
          ),
        ),
      );
    });
    //////New sd///////////////////////////////
    on<_CoApplicantRightsApiCall>((event, emit) async {
      emit(state.copyWith(
        availableSchemesLoading: true,
        sdaccountdetailsFailureorSuccess: none(),
        goldLoandetailsFailureorSuccess: none(),
        rddetailsFailureorSuccess: none(),
        customerAccountSuccessOrfailOption: none(),
        customerOtherBankSuccessOrfailOption: none(),
        customerNotificationSuccessOrfailOption: none(),
        customerProfileSuccessOrfailOption: none(),
        customerScheduledTransactionSuccessOrfailOption: none(),
        customerStatementSuccessOrfailOption: none(),
        customerStatementTransactionsSuccessOrfailOption: none(),
        settlementDetailsFailureOrSuccess: none(),
        settlementFailureOrSuccess: none(),
        removeScheduledTransactionFailureOrSuccess: none(),
        availableSchemeFailureOrSuccess: none(),
        depositFailureOrSuccess: none(),
        customerPaymentSuccessOrfailOption: none(),
        withdrawalPostFailureOrSuccess: none(),
        removeCustomerNotificationFailureOrSuccess: none(),
        newSdPostFailureOrSuccess: none(),
        validateSalescodeFailureOrSuccess: none(),
        ifscCodeFailureOrSuccess: none(),
        customerBankFailureOrSuccess: none(),
        coApplicantRightsFailureOrSuccess: none(),
        nomineeRelationFailureOrSuccess: none(),
        accountMoreInfoFailureOrSuccess: none(),
      ));
      final Either<NewSdFailure, List<CoApplicantRightsModel>>
          nomineeRelations = await iNewSavingsDeposit.coApplicantRights(
              loginToken: state.loginToken);
      emit(nomineeRelations.fold(
          (failure) => state.copyWith(
              availableSchemesLoading: false,
              sdaccountdetailsFailureorSuccess: none(),
              goldLoandetailsFailureorSuccess: none(),
              rddetailsFailureorSuccess: none(),
              customerAccountSuccessOrfailOption: none(),
              customerOtherBankSuccessOrfailOption: none(),
              customerNotificationSuccessOrfailOption: none(),
              customerProfileSuccessOrfailOption: none(),
              customerScheduledTransactionSuccessOrfailOption: none(),
              customerStatementSuccessOrfailOption: none(),
              customerStatementTransactionsSuccessOrfailOption: none(),
              settlementDetailsFailureOrSuccess: none(),
              settlementFailureOrSuccess: none(),
              removeScheduledTransactionFailureOrSuccess: none(),
              availableSchemeFailureOrSuccess: none(),
              depositFailureOrSuccess: none(),
              customerPaymentSuccessOrfailOption: none(),
              withdrawalPostFailureOrSuccess: none(),
              removeCustomerNotificationFailureOrSuccess: none(),
              newSdPostFailureOrSuccess: none(),
              validateSalescodeFailureOrSuccess: none(),
              ifscCodeFailureOrSuccess: none(),
              customerBankFailureOrSuccess: none(),
              nomineeRelationFailureOrSuccess: none(),
              accountMoreInfoFailureOrSuccess: none(),
              coApplicantRightsFailureOrSuccess: Some(Left(failure))),
          (success) => state.copyWith(
              availableSchemesLoading: false,
              sdaccountdetailsFailureorSuccess: none(),
              goldLoandetailsFailureorSuccess: none(),
              rddetailsFailureorSuccess: none(),
              customerAccountSuccessOrfailOption: none(),
              customerOtherBankSuccessOrfailOption: none(),
              customerNotificationSuccessOrfailOption: none(),
              customerProfileSuccessOrfailOption: none(),
              customerScheduledTransactionSuccessOrfailOption: none(),
              customerStatementSuccessOrfailOption: none(),
              customerStatementTransactionsSuccessOrfailOption: none(),
              settlementDetailsFailureOrSuccess: none(),
              settlementFailureOrSuccess: none(),
              removeScheduledTransactionFailureOrSuccess: none(),
              availableSchemeFailureOrSuccess: none(),
              depositFailureOrSuccess: none(),
              customerPaymentSuccessOrfailOption: none(),
              withdrawalPostFailureOrSuccess: none(),
              removeCustomerNotificationFailureOrSuccess: none(),
              newSdPostFailureOrSuccess: none(),
              validateSalescodeFailureOrSuccess: none(),
              ifscCodeFailureOrSuccess: none(),
              customerBankFailureOrSuccess: none(),
              nomineeRelationFailureOrSuccess: none(),
              accountMoreInfoFailureOrSuccess: none(),
              coApplicantRightsFailureOrSuccess: Some(Right(success)),
              coApplicantRightsModel: success)));
    });
    on<_NewSdNomineeRelationListApiCall>((event, emit) async {
      emit(state.copyWith(
        availableSchemesLoading: true,
        sdaccountdetailsFailureorSuccess: none(),
        goldLoandetailsFailureorSuccess: none(),
        rddetailsFailureorSuccess: none(),
        customerAccountSuccessOrfailOption: none(),
        customerOtherBankSuccessOrfailOption: none(),
        customerNotificationSuccessOrfailOption: none(),
        customerProfileSuccessOrfailOption: none(),
        customerScheduledTransactionSuccessOrfailOption: none(),
        customerStatementSuccessOrfailOption: none(),
        customerStatementTransactionsSuccessOrfailOption: none(),
        settlementDetailsFailureOrSuccess: none(),
        settlementFailureOrSuccess: none(),
        removeScheduledTransactionFailureOrSuccess: none(),
        availableSchemeFailureOrSuccess: none(),
        depositFailureOrSuccess: none(),
        customerPaymentSuccessOrfailOption: none(),
        withdrawalPostFailureOrSuccess: none(),
        removeCustomerNotificationFailureOrSuccess: none(),
        newSdPostFailureOrSuccess: none(),
        validateSalescodeFailureOrSuccess: none(),
        ifscCodeFailureOrSuccess: none(),
        customerBankFailureOrSuccess: none(),
        coApplicantRightsFailureOrSuccess: none(),
        nomineeRelationFailureOrSuccess: none(),
        accountMoreInfoFailureOrSuccess: none(),
      ));
      final Either<NewSdFailure, List<NomineeRelationDataModel>>
          nomineeRelations = await iNewSavingsDeposit.nomineeRelations(
              loginToken: state.loginToken);
      emit(nomineeRelations.fold(
          (failure) => state.copyWith(
              availableSchemesLoading: false,
              sdaccountdetailsFailureorSuccess: none(),
              goldLoandetailsFailureorSuccess: none(),
              rddetailsFailureorSuccess: none(),
              customerAccountSuccessOrfailOption: none(),
              customerOtherBankSuccessOrfailOption: none(),
              customerNotificationSuccessOrfailOption: none(),
              customerProfileSuccessOrfailOption: none(),
              customerScheduledTransactionSuccessOrfailOption: none(),
              customerStatementSuccessOrfailOption: none(),
              customerStatementTransactionsSuccessOrfailOption: none(),
              settlementDetailsFailureOrSuccess: none(),
              settlementFailureOrSuccess: none(),
              removeScheduledTransactionFailureOrSuccess: none(),
              availableSchemeFailureOrSuccess: none(),
              depositFailureOrSuccess: none(),
              customerPaymentSuccessOrfailOption: none(),
              withdrawalPostFailureOrSuccess: none(),
              removeCustomerNotificationFailureOrSuccess: none(),
              newSdPostFailureOrSuccess: none(),
              validateSalescodeFailureOrSuccess: none(),
              ifscCodeFailureOrSuccess: none(),
              customerBankFailureOrSuccess: none(),
              coApplicantRightsFailureOrSuccess: none(),
              accountMoreInfoFailureOrSuccess: none(),
              nomineeRelationFailureOrSuccess: Some(Left(failure))),
          (success) => state.copyWith(
              availableSchemesLoading: false,
              sdaccountdetailsFailureorSuccess: none(),
              goldLoandetailsFailureorSuccess: none(),
              rddetailsFailureorSuccess: none(),
              customerAccountSuccessOrfailOption: none(),
              customerOtherBankSuccessOrfailOption: none(),
              customerNotificationSuccessOrfailOption: none(),
              customerProfileSuccessOrfailOption: none(),
              customerScheduledTransactionSuccessOrfailOption: none(),
              customerStatementSuccessOrfailOption: none(),
              customerStatementTransactionsSuccessOrfailOption: none(),
              settlementDetailsFailureOrSuccess: none(),
              settlementFailureOrSuccess: none(),
              removeScheduledTransactionFailureOrSuccess: none(),
              availableSchemeFailureOrSuccess: none(),
              depositFailureOrSuccess: none(),
              customerPaymentSuccessOrfailOption: none(),
              withdrawalPostFailureOrSuccess: none(),
              removeCustomerNotificationFailureOrSuccess: none(),
              newSdPostFailureOrSuccess: none(),
              validateSalescodeFailureOrSuccess: none(),
              ifscCodeFailureOrSuccess: none(),
              customerBankFailureOrSuccess: none(),
              coApplicantRightsFailureOrSuccess: none(),
              accountMoreInfoFailureOrSuccess: none(),
              nomineeRelationFailureOrSuccess: Some(Right(success)),
              nomineeRelationDataModel: success)));
    });
    on<_NewSDResponse>((event, emit) {
      emit(state.copyWith(
          sdaccountdetailsFailureorSuccess: none(),
          goldLoandetailsFailureorSuccess: none(),
          rddetailsFailureorSuccess: none(),
          customerAccountSuccessOrfailOption: none(),
          customerOtherBankSuccessOrfailOption: none(),
          customerNotificationSuccessOrfailOption: none(),
          customerProfileSuccessOrfailOption: none(),
          customerScheduledTransactionSuccessOrfailOption: none(),
          customerStatementSuccessOrfailOption: none(),
          customerStatementTransactionsSuccessOrfailOption: none(),
          settlementDetailsFailureOrSuccess: none(),
          settlementFailureOrSuccess: none(),
          removeScheduledTransactionFailureOrSuccess: none(),
          availableSchemeFailureOrSuccess: none(),
          depositFailureOrSuccess: none(),
          customerPaymentSuccessOrfailOption: none(),
          withdrawalPostFailureOrSuccess: none(),
          removeCustomerNotificationFailureOrSuccess: none(),
          newSdPostFailureOrSuccess: none(),
          validateSalescodeFailureOrSuccess: none(),
          ifscCodeFailureOrSuccess: none(),
          customerBankFailureOrSuccess: none(),
          coApplicantRightsFailureOrSuccess: none(),
          nomineeRelationFailureOrSuccess: none(),
          accountMoreInfoFailureOrSuccess: none(),
          newsdResponse: event.response));
    });
    on<_SchemeCardChanged>((event, emit) {
      emit(state.copyWith(
          sdaccountdetailsFailureorSuccess: none(),
          goldLoandetailsFailureorSuccess: none(),
          rddetailsFailureorSuccess: none(),
          customerAccountSuccessOrfailOption: none(),
          customerOtherBankSuccessOrfailOption: none(),
          customerNotificationSuccessOrfailOption: none(),
          customerProfileSuccessOrfailOption: none(),
          customerScheduledTransactionSuccessOrfailOption: none(),
          customerStatementSuccessOrfailOption: none(),
          customerStatementTransactionsSuccessOrfailOption: none(),
          settlementDetailsFailureOrSuccess: none(),
          settlementFailureOrSuccess: none(),
          removeScheduledTransactionFailureOrSuccess: none(),
          availableSchemeFailureOrSuccess: none(),
          depositFailureOrSuccess: none(),
          customerPaymentSuccessOrfailOption: none(),
          withdrawalPostFailureOrSuccess: none(),
          removeCustomerNotificationFailureOrSuccess: none(),
          newSdPostFailureOrSuccess: none(),
          validateSalescodeFailureOrSuccess: none(),
          ifscCodeFailureOrSuccess: none(),
          customerBankFailureOrSuccess: none(),
          coApplicantRightsFailureOrSuccess: none(),
          nomineeRelationFailureOrSuccess: none(),
          accountMoreInfoFailureOrSuccess: none(),
          schemeCardIndex: event.schemeCardIndex!));
    });
    on<_NewsdNomineeDob>((event, emit) {
      final ageCalc =
          AgeCalculator.age(event.choosenDate, today: state.currentDate);
      final age = ageCalc.years;
      emit(state.copyWith(
        sdaccountdetailsFailureorSuccess: none(),
        goldLoandetailsFailureorSuccess: none(),
        rddetailsFailureorSuccess: none(),
        customerAccountSuccessOrfailOption: none(),
        customerOtherBankSuccessOrfailOption: none(),
        customerNotificationSuccessOrfailOption: none(),
        customerProfileSuccessOrfailOption: none(),
        customerScheduledTransactionSuccessOrfailOption: none(),
        customerStatementSuccessOrfailOption: none(),
        customerStatementTransactionsSuccessOrfailOption: none(),
        settlementDetailsFailureOrSuccess: none(),
        settlementFailureOrSuccess: none(),
        removeScheduledTransactionFailureOrSuccess: none(),
        availableSchemeFailureOrSuccess: none(),
        depositFailureOrSuccess: none(),
        customerPaymentSuccessOrfailOption: none(),
        withdrawalPostFailureOrSuccess: none(),
        removeCustomerNotificationFailureOrSuccess: none(),
        newSdPostFailureOrSuccess: none(),
        validateSalescodeFailureOrSuccess: none(),
        ifscCodeFailureOrSuccess: none(),
        customerBankFailureOrSuccess: none(),
        coApplicantRightsFailureOrSuccess: none(),
        accountMoreInfoFailureOrSuccess: none(),
        nomineeRelationFailureOrSuccess: none(),
        age: age,
      ));
      if (age < 18) {
        emit(state.copyWith(
            sdaccountdetailsFailureorSuccess: none(),
            goldLoandetailsFailureorSuccess: none(),
            rddetailsFailureorSuccess: none(),
            customerAccountSuccessOrfailOption: none(),
            customerOtherBankSuccessOrfailOption: none(),
            customerNotificationSuccessOrfailOption: none(),
            customerProfileSuccessOrfailOption: none(),
            customerScheduledTransactionSuccessOrfailOption: none(),
            customerStatementSuccessOrfailOption: none(),
            customerStatementTransactionsSuccessOrfailOption: none(),
            settlementDetailsFailureOrSuccess: none(),
            settlementFailureOrSuccess: none(),
            removeScheduledTransactionFailureOrSuccess: none(),
            availableSchemeFailureOrSuccess: none(),
            depositFailureOrSuccess: none(),
            customerPaymentSuccessOrfailOption: none(),
            withdrawalPostFailureOrSuccess: none(),
            removeCustomerNotificationFailureOrSuccess: none(),
            newSdPostFailureOrSuccess: none(),
            validateSalescodeFailureOrSuccess: none(),
            ifscCodeFailureOrSuccess: none(),
            customerBankFailureOrSuccess: none(),
            coApplicantRightsFailureOrSuccess: none(),
            accountMoreInfoFailureOrSuccess: none(),
            nomineeRelationFailureOrSuccess: none(),
            minor: true));
      } else {
        emit(state.copyWith(
            sdaccountdetailsFailureorSuccess: none(),
            goldLoandetailsFailureorSuccess: none(),
            rddetailsFailureorSuccess: none(),
            customerAccountSuccessOrfailOption: none(),
            customerOtherBankSuccessOrfailOption: none(),
            customerNotificationSuccessOrfailOption: none(),
            customerProfileSuccessOrfailOption: none(),
            customerScheduledTransactionSuccessOrfailOption: none(),
            customerStatementSuccessOrfailOption: none(),
            customerStatementTransactionsSuccessOrfailOption: none(),
            settlementDetailsFailureOrSuccess: none(),
            settlementFailureOrSuccess: none(),
            removeScheduledTransactionFailureOrSuccess: none(),
            availableSchemeFailureOrSuccess: none(),
            depositFailureOrSuccess: none(),
            customerPaymentSuccessOrfailOption: none(),
            withdrawalPostFailureOrSuccess: none(),
            removeCustomerNotificationFailureOrSuccess: none(),
            newSdPostFailureOrSuccess: none(),
            validateSalescodeFailureOrSuccess: none(),
            ifscCodeFailureOrSuccess: none(),
            customerBankFailureOrSuccess: none(),
            coApplicantRightsFailureOrSuccess: none(),
            accountMoreInfoFailureOrSuccess: none(),
            nomineeRelationFailureOrSuccess: none(),
            minor: false));
      }

      // print(state.birthday);
    });
    on<_ResetRadioButton>((event, emit) {
      emit(state.copyWith(
          sdaccountdetailsFailureorSuccess: none(),
          goldLoandetailsFailureorSuccess: none(),
          rddetailsFailureorSuccess: none(),
          customerAccountSuccessOrfailOption: none(),
          customerOtherBankSuccessOrfailOption: none(),
          customerNotificationSuccessOrfailOption: none(),
          customerProfileSuccessOrfailOption: none(),
          customerScheduledTransactionSuccessOrfailOption: none(),
          customerStatementSuccessOrfailOption: none(),
          customerStatementTransactionsSuccessOrfailOption: none(),
          settlementDetailsFailureOrSuccess: none(),
          settlementFailureOrSuccess: none(),
          removeScheduledTransactionFailureOrSuccess: none(),
          availableSchemeFailureOrSuccess: none(),
          depositFailureOrSuccess: none(),
          customerPaymentSuccessOrfailOption: none(),
          withdrawalPostFailureOrSuccess: none(),
          removeCustomerNotificationFailureOrSuccess: none(),
          newSdPostFailureOrSuccess: none(),
          validateSalescodeFailureOrSuccess: none(),
          ifscCodeFailureOrSuccess: none(),
          customerBankFailureOrSuccess: none(),
          coApplicantRightsFailureOrSuccess: none(),
          nomineeRelationFailureOrSuccess: none(),
          accountMoreInfoFailureOrSuccess: none(),
          radioButtonActive: !state.radioButtonActive));
    });

    on<_NomineeActive>((event, emit) {
      emit(state.copyWith(
          sdaccountdetailsFailureorSuccess: none(),
          goldLoandetailsFailureorSuccess: none(),
          rddetailsFailureorSuccess: none(),
          customerAccountSuccessOrfailOption: none(),
          customerOtherBankSuccessOrfailOption: none(),
          customerNotificationSuccessOrfailOption: none(),
          customerProfileSuccessOrfailOption: none(),
          customerScheduledTransactionSuccessOrfailOption: none(),
          customerStatementSuccessOrfailOption: none(),
          customerStatementTransactionsSuccessOrfailOption: none(),
          settlementDetailsFailureOrSuccess: none(),
          settlementFailureOrSuccess: none(),
          removeScheduledTransactionFailureOrSuccess: none(),
          availableSchemeFailureOrSuccess: none(),
          depositFailureOrSuccess: none(),
          customerPaymentSuccessOrfailOption: none(),
          withdrawalPostFailureOrSuccess: none(),
          removeCustomerNotificationFailureOrSuccess: none(),
          newSdPostFailureOrSuccess: none(),
          validateSalescodeFailureOrSuccess: none(),
          ifscCodeFailureOrSuccess: none(),
          customerBankFailureOrSuccess: none(),
          coApplicantRightsFailureOrSuccess: none(),
          nomineeRelationFailureOrSuccess: none(),
          accountMoreInfoFailureOrSuccess: none(),
          nomineeACtive: !state.nomineeACtive));
    });
    on<_NomineeMinor>((event, emit) {
      emit(state.copyWith(
          sdaccountdetailsFailureorSuccess: none(),
          goldLoandetailsFailureorSuccess: none(),
          rddetailsFailureorSuccess: none(),
          customerAccountSuccessOrfailOption: none(),
          customerOtherBankSuccessOrfailOption: none(),
          customerNotificationSuccessOrfailOption: none(),
          customerProfileSuccessOrfailOption: none(),
          customerScheduledTransactionSuccessOrfailOption: none(),
          customerStatementSuccessOrfailOption: none(),
          customerStatementTransactionsSuccessOrfailOption: none(),
          settlementDetailsFailureOrSuccess: none(),
          settlementFailureOrSuccess: none(),
          removeScheduledTransactionFailureOrSuccess: none(),
          availableSchemeFailureOrSuccess: none(),
          depositFailureOrSuccess: none(),
          customerPaymentSuccessOrfailOption: none(),
          withdrawalPostFailureOrSuccess: none(),
          removeCustomerNotificationFailureOrSuccess: none(),
          newSdPostFailureOrSuccess: none(),
          validateSalescodeFailureOrSuccess: none(),
          ifscCodeFailureOrSuccess: none(),
          customerBankFailureOrSuccess: none(),
          coApplicantRightsFailureOrSuccess: none(),
          nomineeRelationFailureOrSuccess: none(),
          accountMoreInfoFailureOrSuccess: none(),
          minor: !state.minor,
          statusid: state.minor ? 1 : 0));
    });
    on<_RelationWithApplicant>((event, emit) {
      emit(state.copyWith(
        sdaccountdetailsFailureorSuccess: none(),
        goldLoandetailsFailureorSuccess: none(),
        rddetailsFailureorSuccess: none(),
        customerAccountSuccessOrfailOption: none(),
        customerOtherBankSuccessOrfailOption: none(),
        customerNotificationSuccessOrfailOption: none(),
        customerProfileSuccessOrfailOption: none(),
        customerScheduledTransactionSuccessOrfailOption: none(),
        customerStatementSuccessOrfailOption: none(),
        customerStatementTransactionsSuccessOrfailOption: none(),
        settlementDetailsFailureOrSuccess: none(),
        settlementFailureOrSuccess: none(),
        removeScheduledTransactionFailureOrSuccess: none(),
        availableSchemeFailureOrSuccess: none(),
        depositFailureOrSuccess: none(),
        customerPaymentSuccessOrfailOption: none(),
        withdrawalPostFailureOrSuccess: none(),
        removeCustomerNotificationFailureOrSuccess: none(),
        newSdPostFailureOrSuccess: none(),
        validateSalescodeFailureOrSuccess: none(),
        ifscCodeFailureOrSuccess: none(),
        customerBankFailureOrSuccess: none(),
        coApplicantRightsFailureOrSuccess: none(),
        nomineeRelationFailureOrSuccess: none(),
        accountMoreInfoFailureOrSuccess: none(),
        relationLabel: event.relation,
      ));
    });
    on<_CoApplicantRights>((event, emit) {
      emit(state.copyWith(
          sdaccountdetailsFailureorSuccess: none(),
          goldLoandetailsFailureorSuccess: none(),
          rddetailsFailureorSuccess: none(),
          customerAccountSuccessOrfailOption: none(),
          customerOtherBankSuccessOrfailOption: none(),
          customerNotificationSuccessOrfailOption: none(),
          customerProfileSuccessOrfailOption: none(),
          customerScheduledTransactionSuccessOrfailOption: none(),
          customerStatementSuccessOrfailOption: none(),
          customerStatementTransactionsSuccessOrfailOption: none(),
          settlementDetailsFailureOrSuccess: none(),
          settlementFailureOrSuccess: none(),
          removeScheduledTransactionFailureOrSuccess: none(),
          availableSchemeFailureOrSuccess: none(),
          depositFailureOrSuccess: none(),
          customerPaymentSuccessOrfailOption: none(),
          withdrawalPostFailureOrSuccess: none(),
          removeCustomerNotificationFailureOrSuccess: none(),
          newSdPostFailureOrSuccess: none(),
          validateSalescodeFailureOrSuccess: none(),
          ifscCodeFailureOrSuccess: none(),
          customerBankFailureOrSuccess: none(),
          coApplicantRightsFailureOrSuccess: none(),
          nomineeRelationFailureOrSuccess: none(),
          accountMoreInfoFailureOrSuccess: none(),
          coApplicantsubType: event.coApplicantSubType,
          coapplicantRightsValue: event.coApplicantRights));
    });
    on<_EmployeeOrAgent>((event, emit) {
      emit(state.copyWith(
        sdaccountdetailsFailureorSuccess: none(),
        goldLoandetailsFailureorSuccess: none(),
        rddetailsFailureorSuccess: none(),
        customerAccountSuccessOrfailOption: none(),
        customerOtherBankSuccessOrfailOption: none(),
        customerNotificationSuccessOrfailOption: none(),
        customerProfileSuccessOrfailOption: none(),
        customerScheduledTransactionSuccessOrfailOption: none(),
        customerStatementSuccessOrfailOption: none(),
        customerStatementTransactionsSuccessOrfailOption: none(),
        settlementDetailsFailureOrSuccess: none(),
        settlementFailureOrSuccess: none(),
        removeScheduledTransactionFailureOrSuccess: none(),
        availableSchemeFailureOrSuccess: none(),
        depositFailureOrSuccess: none(),
        customerPaymentSuccessOrfailOption: none(),
        withdrawalPostFailureOrSuccess: none(),
        removeCustomerNotificationFailureOrSuccess: none(),
        newSdPostFailureOrSuccess: none(),
        validateSalescodeFailureOrSuccess: none(),
        ifscCodeFailureOrSuccess: none(),
        customerBankFailureOrSuccess: none(),
        coApplicantRightsFailureOrSuccess: none(),
        nomineeRelationFailureOrSuccess: none(),
        accountMoreInfoFailureOrSuccess: none(),
        employeeOrAgent: event.employeeORagent,
      ));
    });

    on<_AvailableSchemes>((event, emit) async {
      emit(state.copyWith(
        availableSchemesLoading: true,
        sdaccountdetailsFailureorSuccess: none(),
        goldLoandetailsFailureorSuccess: none(),
        rddetailsFailureorSuccess: none(),
        customerAccountSuccessOrfailOption: none(),
        customerOtherBankSuccessOrfailOption: none(),
        customerNotificationSuccessOrfailOption: none(),
        customerProfileSuccessOrfailOption: none(),
        customerScheduledTransactionSuccessOrfailOption: none(),
        customerStatementSuccessOrfailOption: none(),
        customerStatementTransactionsSuccessOrfailOption: none(),
        settlementDetailsFailureOrSuccess: none(),
        settlementFailureOrSuccess: none(),
        removeScheduledTransactionFailureOrSuccess: none(),
        availableSchemeFailureOrSuccess: none(),
        depositFailureOrSuccess: none(),
        customerPaymentSuccessOrfailOption: none(),
        withdrawalPostFailureOrSuccess: none(),
        removeCustomerNotificationFailureOrSuccess: none(),
        newSdPostFailureOrSuccess: none(),
        validateSalescodeFailureOrSuccess: none(),
        ifscCodeFailureOrSuccess: none(),
        customerBankFailureOrSuccess: none(),
        coApplicantRightsFailureOrSuccess: none(),
        accountMoreInfoFailureOrSuccess: none(),
        nomineeRelationFailureOrSuccess: none(),
      ));
      final Either<NewSdFailure, List<AvailableSchemesDataModel>>
          availableSchemeAPIResult =
          await iNewSavingsDeposit.getAvailableSchemes(
              branchid: event.branchid, loginToken: state.loginToken);
      emit(availableSchemeAPIResult.fold(
          (failure) => state.copyWith(
              availableSchemesLoading: false,
              sdaccountdetailsFailureorSuccess: none(),
              goldLoandetailsFailureorSuccess: none(),
              rddetailsFailureorSuccess: none(),
              customerAccountSuccessOrfailOption: none(),
              customerOtherBankSuccessOrfailOption: none(),
              customerNotificationSuccessOrfailOption: none(),
              customerProfileSuccessOrfailOption: none(),
              customerScheduledTransactionSuccessOrfailOption: none(),
              customerStatementSuccessOrfailOption: none(),
              customerStatementTransactionsSuccessOrfailOption: none(),
              settlementDetailsFailureOrSuccess: none(),
              settlementFailureOrSuccess: none(),
              removeScheduledTransactionFailureOrSuccess: none(),
              depositFailureOrSuccess: none(),
              customerPaymentSuccessOrfailOption: none(),
              withdrawalPostFailureOrSuccess: none(),
              removeCustomerNotificationFailureOrSuccess: none(),
              newSdPostFailureOrSuccess: none(),
              validateSalescodeFailureOrSuccess: none(),
              ifscCodeFailureOrSuccess: none(),
              customerBankFailureOrSuccess: none(),
              coApplicantRightsFailureOrSuccess: none(),
              nomineeRelationFailureOrSuccess: none(),
              accountMoreInfoFailureOrSuccess: none(),
              availableSchemeFailureOrSuccess: Some(Left(failure))),
          (success) => state.copyWith(
              availableSchemesLoading: false,
              sdaccountdetailsFailureorSuccess: none(),
              goldLoandetailsFailureorSuccess: none(),
              rddetailsFailureorSuccess: none(),
              customerAccountSuccessOrfailOption: none(),
              customerOtherBankSuccessOrfailOption: none(),
              customerNotificationSuccessOrfailOption: none(),
              customerProfileSuccessOrfailOption: none(),
              customerScheduledTransactionSuccessOrfailOption: none(),
              customerStatementSuccessOrfailOption: none(),
              customerStatementTransactionsSuccessOrfailOption: none(),
              settlementDetailsFailureOrSuccess: none(),
              settlementFailureOrSuccess: none(),
              removeScheduledTransactionFailureOrSuccess: none(),
              depositFailureOrSuccess: none(),
              customerPaymentSuccessOrfailOption: none(),
              withdrawalPostFailureOrSuccess: none(),
              removeCustomerNotificationFailureOrSuccess: none(),
              newSdPostFailureOrSuccess: none(),
              validateSalescodeFailureOrSuccess: none(),
              ifscCodeFailureOrSuccess: none(),
              customerBankFailureOrSuccess: none(),
              coApplicantRightsFailureOrSuccess: none(),
              nomineeRelationFailureOrSuccess: none(),
              accountMoreInfoFailureOrSuccess: none(),
              availableSchemeFailureOrSuccess: Some(Right(success)),
              availableschemeModel: success)));
    });
    on<_searchResultCustomerIdEvent>((event, emit) {
      emit(state.copyWith(
          sdaccountdetailsFailureorSuccess: none(),
          goldLoandetailsFailureorSuccess: none(),
          rddetailsFailureorSuccess: none(),
          customerAccountSuccessOrfailOption: none(),
          customerOtherBankSuccessOrfailOption: none(),
          customerNotificationSuccessOrfailOption: none(),
          customerProfileSuccessOrfailOption: none(),
          customerScheduledTransactionSuccessOrfailOption: none(),
          customerStatementSuccessOrfailOption: none(),
          customerStatementTransactionsSuccessOrfailOption: none(),
          settlementDetailsFailureOrSuccess: none(),
          settlementFailureOrSuccess: none(),
          removeScheduledTransactionFailureOrSuccess: none(),
          availableSchemeFailureOrSuccess: none(),
          depositFailureOrSuccess: none(),
          customerPaymentSuccessOrfailOption: none(),
          withdrawalPostFailureOrSuccess: none(),
          removeCustomerNotificationFailureOrSuccess: none(),
          newSdPostFailureOrSuccess: none(),
          validateSalescodeFailureOrSuccess: none(),
          ifscCodeFailureOrSuccess: none(),
          customerBankFailureOrSuccess: none(),
          coApplicantRightsFailureOrSuccess: none(),
          nomineeRelationFailureOrSuccess: none(),
          accountMoreInfoFailureOrSuccess: none(),
          searchResultCustomerID: event.customerIdSearchResult,
          searchResultBranchId: event.branchId,
          searchResultCustomerName: event.customerName,
          searchResultFirmId: event.firmId));
    });

    on<_NewSdEmployeeBranchDetails>((event, emit) {
      emit(state.copyWith(
        sdaccountdetailsFailureorSuccess: none(),
        goldLoandetailsFailureorSuccess: none(),
        rddetailsFailureorSuccess: none(),
        customerAccountSuccessOrfailOption: none(),
        customerOtherBankSuccessOrfailOption: none(),
        customerNotificationSuccessOrfailOption: none(),
        customerProfileSuccessOrfailOption: none(),
        customerScheduledTransactionSuccessOrfailOption: none(),
        customerStatementSuccessOrfailOption: none(),
        customerStatementTransactionsSuccessOrfailOption: none(),
        settlementDetailsFailureOrSuccess: none(),
        settlementFailureOrSuccess: none(),
        removeScheduledTransactionFailureOrSuccess: none(),
        availableSchemeFailureOrSuccess: none(),
        depositFailureOrSuccess: none(),
        customerPaymentSuccessOrfailOption: none(),
        withdrawalPostFailureOrSuccess: none(),
        removeCustomerNotificationFailureOrSuccess: none(),
        newSdPostFailureOrSuccess: none(),
        validateSalescodeFailureOrSuccess: none(),
        ifscCodeFailureOrSuccess: none(),
        customerBankFailureOrSuccess: none(),
        coApplicantRightsFailureOrSuccess: none(),
        nomineeRelationFailureOrSuccess: none(),
        accountMoreInfoFailureOrSuccess: none(),
        newSdfirmId: event.firmId,
        newSdbranchid: event.branchid,
        newSdemployeecode: event.employeecode,
        newSdbranchName: event.branchName,
      ));
    });
/////taxPayer/////////////////
    on<_EnableNewSdTaxpayer>((event, emit) {
      emit(state.copyWith(
          sdaccountdetailsFailureorSuccess: none(),
          goldLoandetailsFailureorSuccess: none(),
          rddetailsFailureorSuccess: none(),
          customerAccountSuccessOrfailOption: none(),
          customerOtherBankSuccessOrfailOption: none(),
          customerNotificationSuccessOrfailOption: none(),
          customerProfileSuccessOrfailOption: none(),
          customerScheduledTransactionSuccessOrfailOption: none(),
          customerStatementSuccessOrfailOption: none(),
          customerStatementTransactionsSuccessOrfailOption: none(),
          settlementDetailsFailureOrSuccess: none(),
          settlementFailureOrSuccess: none(),
          removeScheduledTransactionFailureOrSuccess: none(),
          availableSchemeFailureOrSuccess: none(),
          depositFailureOrSuccess: none(),
          customerPaymentSuccessOrfailOption: none(),
          withdrawalPostFailureOrSuccess: none(),
          removeCustomerNotificationFailureOrSuccess: none(),
          newSdPostFailureOrSuccess: none(),
          validateSalescodeFailureOrSuccess: none(),
          ifscCodeFailureOrSuccess: none(),
          customerBankFailureOrSuccess: none(),
          coApplicantRightsFailureOrSuccess: none(),
          nomineeRelationFailureOrSuccess: none(),
          accountMoreInfoFailureOrSuccess: none(),
          taxPayer: !state.taxPayer));
    });

    on<_NewSdCoApplicantDetails>((event, emit) {
      emit(state.copyWith(
        sdaccountdetailsFailureorSuccess: none(),
        goldLoandetailsFailureorSuccess: none(),
        rddetailsFailureorSuccess: none(),
        customerAccountSuccessOrfailOption: none(),
        customerOtherBankSuccessOrfailOption: none(),
        customerNotificationSuccessOrfailOption: none(),
        customerProfileSuccessOrfailOption: none(),
        customerScheduledTransactionSuccessOrfailOption: none(),
        customerStatementSuccessOrfailOption: none(),
        customerStatementTransactionsSuccessOrfailOption: none(),
        settlementDetailsFailureOrSuccess: none(),
        settlementFailureOrSuccess: none(),
        removeScheduledTransactionFailureOrSuccess: none(),
        availableSchemeFailureOrSuccess: none(),
        depositFailureOrSuccess: none(),
        customerPaymentSuccessOrfailOption: none(),
        withdrawalPostFailureOrSuccess: none(),
        removeCustomerNotificationFailureOrSuccess: none(),
        newSdPostFailureOrSuccess: none(),
        validateSalescodeFailureOrSuccess: none(),
        ifscCodeFailureOrSuccess: none(),
        customerBankFailureOrSuccess: none(),
        coApplicantRightsFailureOrSuccess: none(),
        nomineeRelationFailureOrSuccess: none(),
        accountMoreInfoFailureOrSuccess: none(),
        newSdcoApplicantName: event.coApplicantName,
        newSdcoApplicantId: event.coApplicantICustomerId,
        newSdcoApplicantAddress: event.coApplicantAddress,
        newSdcoApplicantPhoneNumber: event.coApplicantPhoneNumber,
        newSdcoApplicantdob: event.coApplicantdob,
        newSdcoApplicantHouseName: event.coApplicantHouseName,
      ));
    });
    on<_NewSdNomineeDetails>((event, emit) {
      emit(state.copyWith(
        sdaccountdetailsFailureorSuccess: none(),
        goldLoandetailsFailureorSuccess: none(),
        rddetailsFailureorSuccess: none(),
        customerAccountSuccessOrfailOption: none(),
        customerOtherBankSuccessOrfailOption: none(),
        customerNotificationSuccessOrfailOption: none(),
        customerProfileSuccessOrfailOption: none(),
        customerScheduledTransactionSuccessOrfailOption: none(),
        customerStatementSuccessOrfailOption: none(),
        customerStatementTransactionsSuccessOrfailOption: none(),
        settlementDetailsFailureOrSuccess: none(),
        settlementFailureOrSuccess: none(),
        removeScheduledTransactionFailureOrSuccess: none(),
        availableSchemeFailureOrSuccess: none(),
        depositFailureOrSuccess: none(),
        customerPaymentSuccessOrfailOption: none(),
        withdrawalPostFailureOrSuccess: none(),
        removeCustomerNotificationFailureOrSuccess: none(),
        newSdPostFailureOrSuccess: none(),
        validateSalescodeFailureOrSuccess: none(),
        ifscCodeFailureOrSuccess: none(),
        customerBankFailureOrSuccess: none(),
        coApplicantRightsFailureOrSuccess: none(),
        nomineeRelationFailureOrSuccess: none(),
        accountMoreInfoFailureOrSuccess: none(),
        newSdnomineeSpouseOrParentName: event.nomineeParentOrSpouseName,
        newSdnomineeName: event.nomineeName,
        newSdnomineedob: event.nomineedob,
        newSdnomineePhoneNumber: event.nomineePhoneNumber,
        newSdnomineeGuardian: event.nomineeGuardian,
        newSdrelationWithNominee: event.relationWithNominee,
        newSdnomineeHouseName: event.nomineeHouseName,
        newSdnomineeLocation: event.nomineelocation,
      ));
    });
    on<_NewSdShemeDetails>((event, emit) {
      final scheme = state.availableschemeModel![state.schemeCardIndex];
      emit(state.copyWith(
        sdaccountdetailsFailureorSuccess: none(),
        goldLoandetailsFailureorSuccess: none(),
        rddetailsFailureorSuccess: none(),
        customerAccountSuccessOrfailOption: none(),
        customerOtherBankSuccessOrfailOption: none(),
        customerNotificationSuccessOrfailOption: none(),
        customerProfileSuccessOrfailOption: none(),
        customerScheduledTransactionSuccessOrfailOption: none(),
        customerStatementSuccessOrfailOption: none(),
        customerStatementTransactionsSuccessOrfailOption: none(),
        settlementDetailsFailureOrSuccess: none(),
        settlementFailureOrSuccess: none(),
        removeScheduledTransactionFailureOrSuccess: none(),
        availableSchemeFailureOrSuccess: none(),
        depositFailureOrSuccess: none(),
        customerPaymentSuccessOrfailOption: none(),
        withdrawalPostFailureOrSuccess: none(),
        removeCustomerNotificationFailureOrSuccess: none(),
        newSdPostFailureOrSuccess: none(),
        validateSalescodeFailureOrSuccess: none(),
        ifscCodeFailureOrSuccess: none(),
        customerBankFailureOrSuccess: none(),
        coApplicantRightsFailureOrSuccess: none(),
        nomineeRelationFailureOrSuccess: none(),
        accountMoreInfoFailureOrSuccess: none(),
        newSdschemeId: scheme.schemeId!.toInt(),
        newSdschemeName: scheme.SD.toString(),
        newSdMaximumAmount: scheme.maxAmount ?? 00,
        newSdMinimumAmount: scheme.minimumAmount ?? 00,
        newSdinterest: scheme.interestRate!,
      ));
    });

    on<_NewSdTransactionDetails>((event, emit) {
      emit(state.copyWith(
        sdaccountdetailsFailureorSuccess: none(),
        goldLoandetailsFailureorSuccess: none(),
        rddetailsFailureorSuccess: none(),
        customerAccountSuccessOrfailOption: none(),
        customerOtherBankSuccessOrfailOption: none(),
        customerNotificationSuccessOrfailOption: none(),
        customerProfileSuccessOrfailOption: none(),
        customerScheduledTransactionSuccessOrfailOption: none(),
        customerStatementSuccessOrfailOption: none(),
        customerStatementTransactionsSuccessOrfailOption: none(),
        settlementDetailsFailureOrSuccess: none(),
        settlementFailureOrSuccess: none(),
        removeScheduledTransactionFailureOrSuccess: none(),
        availableSchemeFailureOrSuccess: none(),
        depositFailureOrSuccess: none(),
        customerPaymentSuccessOrfailOption: none(),
        withdrawalPostFailureOrSuccess: none(),
        removeCustomerNotificationFailureOrSuccess: none(),
        newSdPostFailureOrSuccess: none(),
        validateSalescodeFailureOrSuccess: none(),
        ifscCodeFailureOrSuccess: none(),
        customerBankFailureOrSuccess: none(),
        coApplicantRightsFailureOrSuccess: none(),
        nomineeRelationFailureOrSuccess: none(),
        accountMoreInfoFailureOrSuccess: none(),
        newSdrealizationDate: event.realizationDate,
        newSdcustomerBank: event.customerBank,
        newSdchequeNo: event.chequeNo,
        newSdtransactionMethod: event.transactionMethod,
        branchBankAccounNumber: event.branchBankAccountNuber,
        branchBankAccountName: event.branchBankAccountName,
      ));
    });

    on<_NewSdAmount>((event, emit) {
      emit(state.copyWith(
        sdaccountdetailsFailureorSuccess: none(),
        goldLoandetailsFailureorSuccess: none(),
        rddetailsFailureorSuccess: none(),
        customerAccountSuccessOrfailOption: none(),
        customerOtherBankSuccessOrfailOption: none(),
        customerNotificationSuccessOrfailOption: none(),
        customerProfileSuccessOrfailOption: none(),
        customerScheduledTransactionSuccessOrfailOption: none(),
        customerStatementSuccessOrfailOption: none(),
        customerStatementTransactionsSuccessOrfailOption: none(),
        settlementDetailsFailureOrSuccess: none(),
        settlementFailureOrSuccess: none(),
        removeScheduledTransactionFailureOrSuccess: none(),
        availableSchemeFailureOrSuccess: none(),
        depositFailureOrSuccess: none(),
        customerPaymentSuccessOrfailOption: none(),
        withdrawalPostFailureOrSuccess: none(),
        removeCustomerNotificationFailureOrSuccess: none(),
        newSdPostFailureOrSuccess: none(),
        validateSalescodeFailureOrSuccess: none(),
        ifscCodeFailureOrSuccess: none(),
        customerBankFailureOrSuccess: none(),
        coApplicantRightsFailureOrSuccess: none(),
        nomineeRelationFailureOrSuccess: none(),
        accountMoreInfoFailureOrSuccess: none(),
        newSdamount: event.newSdAmount,
      ));
    });
    on<_NewSdSalescode>((event, emit) {
      emit(state.copyWith(
        sdaccountdetailsFailureorSuccess: none(),
        goldLoandetailsFailureorSuccess: none(),
        rddetailsFailureorSuccess: none(),
        customerAccountSuccessOrfailOption: none(),
        customerOtherBankSuccessOrfailOption: none(),
        customerNotificationSuccessOrfailOption: none(),
        customerProfileSuccessOrfailOption: none(),
        customerScheduledTransactionSuccessOrfailOption: none(),
        customerStatementSuccessOrfailOption: none(),
        customerStatementTransactionsSuccessOrfailOption: none(),
        settlementDetailsFailureOrSuccess: none(),
        settlementFailureOrSuccess: none(),
        removeScheduledTransactionFailureOrSuccess: none(),
        availableSchemeFailureOrSuccess: none(),
        depositFailureOrSuccess: none(),
        customerPaymentSuccessOrfailOption: none(),
        withdrawalPostFailureOrSuccess: none(),
        removeCustomerNotificationFailureOrSuccess: none(),
        newSdPostFailureOrSuccess: none(),
        validateSalescodeFailureOrSuccess: none(),
        ifscCodeFailureOrSuccess: none(),
        customerBankFailureOrSuccess: none(),
        coApplicantRightsFailureOrSuccess: none(),
        nomineeRelationFailureOrSuccess: none(),
        accountMoreInfoFailureOrSuccess: none(),
        newSdValidsalesCode: event.newSdsalesCode,
      ));
    });
    on<_SalescodevalidateOrNot>((event, emit) {
      emit(state.copyWith(
          sdaccountdetailsFailureorSuccess: none(),
          goldLoandetailsFailureorSuccess: none(),
          rddetailsFailureorSuccess: none(),
          customerAccountSuccessOrfailOption: none(),
          customerOtherBankSuccessOrfailOption: none(),
          customerNotificationSuccessOrfailOption: none(),
          customerProfileSuccessOrfailOption: none(),
          customerScheduledTransactionSuccessOrfailOption: none(),
          customerStatementSuccessOrfailOption: none(),
          customerStatementTransactionsSuccessOrfailOption: none(),
          settlementDetailsFailureOrSuccess: none(),
          settlementFailureOrSuccess: none(),
          removeScheduledTransactionFailureOrSuccess: none(),
          availableSchemeFailureOrSuccess: none(),
          depositFailureOrSuccess: none(),
          customerPaymentSuccessOrfailOption: none(),
          withdrawalPostFailureOrSuccess: none(),
          removeCustomerNotificationFailureOrSuccess: none(),
          newSdPostFailureOrSuccess: none(),
          validateSalescodeFailureOrSuccess: none(),
          ifscCodeFailureOrSuccess: none(),
          customerBankFailureOrSuccess: none(),
          coApplicantRightsFailureOrSuccess: none(),
          nomineeRelationFailureOrSuccess: none(),
          accountMoreInfoFailureOrSuccess: none(),
          found: event.found));
    });
    on<_NewSdPostingValues>((event, emit) async {
      emit(state.copyWith(
        sdaccountdetailsFailureorSuccess: none(),
        goldLoandetailsFailureorSuccess: none(),
        rddetailsFailureorSuccess: none(),
        customerAccountSuccessOrfailOption: none(),
        customerOtherBankSuccessOrfailOption: none(),
        customerNotificationSuccessOrfailOption: none(),
        customerProfileSuccessOrfailOption: none(),
        customerScheduledTransactionSuccessOrfailOption: none(),
        customerStatementSuccessOrfailOption: none(),
        customerStatementTransactionsSuccessOrfailOption: none(),
        settlementDetailsFailureOrSuccess: none(),
        settlementFailureOrSuccess: none(),
        removeScheduledTransactionFailureOrSuccess: none(),
        availableSchemeFailureOrSuccess: none(),
        depositFailureOrSuccess: none(),
        customerPaymentSuccessOrfailOption: none(),
        withdrawalPostFailureOrSuccess: none(),
        removeCustomerNotificationFailureOrSuccess: none(),
        validateSalescodeFailureOrSuccess: none(),
        ifscCodeFailureOrSuccess: none(),
        customerBankFailureOrSuccess: none(),
        coApplicantRightsFailureOrSuccess: none(),
        nomineeRelationFailureOrSuccess: none(),
        accountMoreInfoFailureOrSuccess: none(),
        newsdresponseLoading: true,
        newSdPostFailureOrSuccess: const None(),
      ));
      final Either<NewSdFailure, NewSdPostResponseDataModel> newSdPostResponse =
          await iNewSavingsDeposit.postNewSavingsAccount(
              loginToken: state.loginToken,
              moduleId: event.moduleId,
              customerId: event.customerId,
              schemeId: state.newSdschemeId,
              firmId: event.firmId,
              branchid: state.newSdbranchid,
              depositTYPE: state.newSdschemeName,
              customerName: event.customerName,
              amount: state.newSdamount,
              interest: state.newSdinterest,
              tdsCode: state.taxPayer ? 1 : 0,
              nomineeName: state.newSdnomineeName,
              nomineedob: state.newSdnomineedob,
              nomineePhoneNumber: state.newSdnomineePhoneNumber,
              nomineeGuardianName: state.newSdnomineeGuardian,
              spouseOrParentName: state.newSdnomineeSpouseOrParentName,
              relationWithNominee: state.newSdrelationWithNominee,
              nomineeHouseName: state.newSdnomineeHouseName,
              nomineeLocation: state.newSdnomineeLocation,
              transactionMethod: state
                  .customerPaymentDetails![state.paymentCardIndex]
                  .paymentgatewayname,
              userId: state.newSdemployeecode,
              typeOfSalesPerson: state.employeeOrAgent,
              salesCode: state.newSdValidsalesCode,
              coApplicantCustomerId: state.newSdcoApplicantId,
              coApplicantName: state.newSdcoApplicantName,
              branchBankAccountNumber: event.subsidiaryAccountNo,
              branchBankAccountName: state.branchBankAccountName,
              chequeNo: state.newSdchequeNo,
              customerBank: state.newSdcustomerBank,
              branchName: state.newSdbranchName,
              realizationDate: state.newSdrealizationDate,
              statusId: state.statusid,
              subType: state.coApplicantsubType);

      ////// //----------------------------
      emit(newSdPostResponse.fold(
          (failure) => state.copyWith(
              newsdresponseLoading: false,
              sdaccountdetailsFailureorSuccess: none(),
              goldLoandetailsFailureorSuccess: none(),
              rddetailsFailureorSuccess: none(),
              customerAccountSuccessOrfailOption: none(),
              customerOtherBankSuccessOrfailOption: none(),
              customerNotificationSuccessOrfailOption: none(),
              customerProfileSuccessOrfailOption: none(),
              customerScheduledTransactionSuccessOrfailOption: none(),
              customerStatementSuccessOrfailOption: none(),
              customerStatementTransactionsSuccessOrfailOption: none(),
              settlementDetailsFailureOrSuccess: none(),
              settlementFailureOrSuccess: none(),
              removeScheduledTransactionFailureOrSuccess: none(),
              availableSchemeFailureOrSuccess: none(),
              depositFailureOrSuccess: none(),
              customerPaymentSuccessOrfailOption: none(),
              withdrawalPostFailureOrSuccess: none(),
              removeCustomerNotificationFailureOrSuccess: none(),
              validateSalescodeFailureOrSuccess: none(),
              ifscCodeFailureOrSuccess: none(),
              customerBankFailureOrSuccess: none(),
              coApplicantRightsFailureOrSuccess: none(),
              nomineeRelationFailureOrSuccess: none(),
              accountMoreInfoFailureOrSuccess: none(),
              newSdPostFailureOrSuccess: Some(Left(failure))),
          (success) => state.copyWith(
                newsdresponseLoading: false,
                sdaccountdetailsFailureorSuccess: none(),
                goldLoandetailsFailureorSuccess: none(),
                rddetailsFailureorSuccess: none(),
                customerAccountSuccessOrfailOption: none(),
                customerOtherBankSuccessOrfailOption: none(),
                customerNotificationSuccessOrfailOption: none(),
                customerProfileSuccessOrfailOption: none(),
                customerScheduledTransactionSuccessOrfailOption: none(),
                customerStatementSuccessOrfailOption: none(),
                customerStatementTransactionsSuccessOrfailOption: none(),
                settlementDetailsFailureOrSuccess: none(),
                settlementFailureOrSuccess: none(),
                removeScheduledTransactionFailureOrSuccess: none(),
                availableSchemeFailureOrSuccess: none(),
                depositFailureOrSuccess: none(),
                customerPaymentSuccessOrfailOption: none(),
                withdrawalPostFailureOrSuccess: none(),
                removeCustomerNotificationFailureOrSuccess: none(),
                validateSalescodeFailureOrSuccess: none(),
                ifscCodeFailureOrSuccess: none(),
                customerBankFailureOrSuccess: none(),
                coApplicantRightsFailureOrSuccess: none(),
                nomineeRelationFailureOrSuccess: none(),
                accountMoreInfoFailureOrSuccess: none(),
                newSdPostFailureOrSuccess: Some(Right(success)),
                newSdPostResponseDataModel: success,
              )));
      print("///////////");
      print(state.newSdPostResponseDataModel);
    });

    on<_NewSdValidateAganeOrEmployee>((event, emit) async {
      emit(state.copyWith(
        sdaccountdetailsFailureorSuccess: none(),
        goldLoandetailsFailureorSuccess: none(),
        rddetailsFailureorSuccess: none(),
        customerAccountSuccessOrfailOption: none(),
        customerOtherBankSuccessOrfailOption: none(),
        customerNotificationSuccessOrfailOption: none(),
        customerProfileSuccessOrfailOption: none(),
        customerScheduledTransactionSuccessOrfailOption: none(),
        customerStatementSuccessOrfailOption: none(),
        customerStatementTransactionsSuccessOrfailOption: none(),
        settlementDetailsFailureOrSuccess: none(),
        settlementFailureOrSuccess: none(),
        removeScheduledTransactionFailureOrSuccess: none(),
        availableSchemeFailureOrSuccess: none(),
        depositFailureOrSuccess: none(),
        customerPaymentSuccessOrfailOption: none(),
        withdrawalPostFailureOrSuccess: none(),
        removeCustomerNotificationFailureOrSuccess: none(),
        newSdPostFailureOrSuccess: none(),
        ifscCodeFailureOrSuccess: none(),
        customerBankFailureOrSuccess: none(),
        coApplicantRightsFailureOrSuccess: none(),
        nomineeRelationFailureOrSuccess: none(),
        accountMoreInfoFailureOrSuccess: none(),
        availableSchemesLoading: true,
        validateSalescodeFailureOrSuccess: const None(),
      ));
      final Either<NewSdFailure, EmployeeOrAgentDataModel> newSdPostResponse =
          await iNewSavingsDeposit.validateSalescode(
        loginToken: state.loginToken,
        salesCode: event.newSdsalesCode,
        salesPersontype: event.agentOrEmployee,
      );
      emit(newSdPostResponse.fold(
          (failure) => state.copyWith(
                sdaccountdetailsFailureorSuccess: none(),
                goldLoandetailsFailureorSuccess: none(),
                rddetailsFailureorSuccess: none(),
                customerAccountSuccessOrfailOption: none(),
                customerOtherBankSuccessOrfailOption: none(),
                customerNotificationSuccessOrfailOption: none(),
                customerProfileSuccessOrfailOption: none(),
                customerScheduledTransactionSuccessOrfailOption: none(),
                customerStatementSuccessOrfailOption: none(),
                customerStatementTransactionsSuccessOrfailOption: none(),
                settlementDetailsFailureOrSuccess: none(),
                settlementFailureOrSuccess: none(),
                removeScheduledTransactionFailureOrSuccess: none(),
                availableSchemeFailureOrSuccess: none(),
                depositFailureOrSuccess: none(),
                customerPaymentSuccessOrfailOption: none(),
                withdrawalPostFailureOrSuccess: none(),
                removeCustomerNotificationFailureOrSuccess: none(),
                newSdPostFailureOrSuccess: none(),
                ifscCodeFailureOrSuccess: none(),
                customerBankFailureOrSuccess: none(),
                coApplicantRightsFailureOrSuccess: none(),
                nomineeRelationFailureOrSuccess: none(),
                accountMoreInfoFailureOrSuccess: none(),
                availableSchemesLoading: false,
                validateSalescodeFailureOrSuccess: Some(Left(failure)),
              ),
          (success) => state.copyWith(
              sdaccountdetailsFailureorSuccess: none(),
              goldLoandetailsFailureorSuccess: none(),
              rddetailsFailureorSuccess: none(),
              customerAccountSuccessOrfailOption: none(),
              customerOtherBankSuccessOrfailOption: none(),
              customerNotificationSuccessOrfailOption: none(),
              customerProfileSuccessOrfailOption: none(),
              customerScheduledTransactionSuccessOrfailOption: none(),
              customerStatementSuccessOrfailOption: none(),
              customerStatementTransactionsSuccessOrfailOption: none(),
              settlementDetailsFailureOrSuccess: none(),
              settlementFailureOrSuccess: none(),
              removeScheduledTransactionFailureOrSuccess: none(),
              availableSchemeFailureOrSuccess: none(),
              depositFailureOrSuccess: none(),
              customerPaymentSuccessOrfailOption: none(),
              withdrawalPostFailureOrSuccess: none(),
              removeCustomerNotificationFailureOrSuccess: none(),
              newSdPostFailureOrSuccess: none(),
              ifscCodeFailureOrSuccess: none(),
              customerBankFailureOrSuccess: none(),
              coApplicantRightsFailureOrSuccess: none(),
              nomineeRelationFailureOrSuccess: none(),
              accountMoreInfoFailureOrSuccess: none(),
              availableSchemesLoading: false,
              validateSalescodeFailureOrSuccess: Some(Right(success)),
              employeeOrAgentDataModel: success)));
    });

    on<_ResetSalesCode>((event, emit) {
      emit(state.copyWith(
          sdaccountdetailsFailureorSuccess: none(),
          goldLoandetailsFailureorSuccess: none(),
          rddetailsFailureorSuccess: none(),
          customerAccountSuccessOrfailOption: none(),
          customerOtherBankSuccessOrfailOption: none(),
          customerNotificationSuccessOrfailOption: none(),
          customerProfileSuccessOrfailOption: none(),
          customerScheduledTransactionSuccessOrfailOption: none(),
          customerStatementSuccessOrfailOption: none(),
          customerStatementTransactionsSuccessOrfailOption: none(),
          settlementDetailsFailureOrSuccess: none(),
          settlementFailureOrSuccess: none(),
          removeScheduledTransactionFailureOrSuccess: none(),
          availableSchemeFailureOrSuccess: none(),
          depositFailureOrSuccess: none(),
          customerPaymentSuccessOrfailOption: none(),
          withdrawalPostFailureOrSuccess: none(),
          removeCustomerNotificationFailureOrSuccess: none(),
          newSdPostFailureOrSuccess: none(),
          validateSalescodeFailureOrSuccess: none(),
          ifscCodeFailureOrSuccess: none(),
          customerBankFailureOrSuccess: none(),
          coApplicantRightsFailureOrSuccess: none(),
          nomineeRelationFailureOrSuccess: none(),
          accountMoreInfoFailureOrSuccess: none(),
          found: ''));
    });

    //////Withdrawal fetsch customer/////////////////////////
    on<_FetchCustomerOtherBankAccounts>((event, emit) async {
      print("userid is${event.customerId}");
      emit(
        state.copyWith(
          customerAccountsLoading: false,
          customerOtherBankLoading: true,
          sdaccountdetailsFailureorSuccess: none(),
          goldLoandetailsFailureorSuccess: none(),
          rddetailsFailureorSuccess: none(),
          customerAccountSuccessOrfailOption: none(),
          customerOtherBankSuccessOrfailOption: none(),
          customerNotificationSuccessOrfailOption: none(),
          customerProfileSuccessOrfailOption: none(),
          customerScheduledTransactionSuccessOrfailOption: none(),
          customerStatementSuccessOrfailOption: none(),
          customerStatementTransactionsSuccessOrfailOption: none(),
          settlementDetailsFailureOrSuccess: none(),
          settlementFailureOrSuccess: none(),
          removeScheduledTransactionFailureOrSuccess: none(),
          availableSchemeFailureOrSuccess: none(),
          depositFailureOrSuccess: none(),
          customerPaymentSuccessOrfailOption: none(),
          withdrawalPostFailureOrSuccess: none(),
          removeCustomerNotificationFailureOrSuccess: none(),
          newSdPostFailureOrSuccess: none(),
          validateSalescodeFailureOrSuccess: none(),
          ifscCodeFailureOrSuccess: none(),
          customerBankFailureOrSuccess: none(),
          coApplicantRightsFailureOrSuccess: none(),
          nomineeRelationFailureOrSuccess: none(),
          accountMoreInfoFailureOrSuccess: none(),
        ),
      );
      final Either<CustomerFailure, List<CustomerOtherBankDataModel>>
          customerOtherBankAccountsOption =
          await iCustomerRepo.getCustomerOtherBankcardsDetails(
        userType: event.userType,
        customerId: event.customerId,
        tokenId: state.loginToken,
      );
      emit(
        customerOtherBankAccountsOption.fold(
          (failure) => state.copyWith(
            customerAccountsLoading: false,
            customerOtherBankLoading: false,
            sdaccountdetailsFailureorSuccess: none(),
            goldLoandetailsFailureorSuccess: none(),
            rddetailsFailureorSuccess: none(),
            customerAccountSuccessOrfailOption: none(),
            customerNotificationSuccessOrfailOption: none(),
            customerProfileSuccessOrfailOption: none(),
            customerScheduledTransactionSuccessOrfailOption: none(),
            customerStatementSuccessOrfailOption: none(),
            customerStatementTransactionsSuccessOrfailOption: none(),
            settlementDetailsFailureOrSuccess: none(),
            settlementFailureOrSuccess: none(),
            removeScheduledTransactionFailureOrSuccess: none(),
            availableSchemeFailureOrSuccess: none(),
            depositFailureOrSuccess: none(),
            customerPaymentSuccessOrfailOption: none(),
            withdrawalPostFailureOrSuccess: none(),
            removeCustomerNotificationFailureOrSuccess: none(),
            newSdPostFailureOrSuccess: none(),
            validateSalescodeFailureOrSuccess: none(),
            ifscCodeFailureOrSuccess: none(),
            customerBankFailureOrSuccess: none(),
            coApplicantRightsFailureOrSuccess: none(),
            nomineeRelationFailureOrSuccess: none(),
            accountMoreInfoFailureOrSuccess: none(),
            customerOtherBankSuccessOrfailOption: Some(Left(failure)),
          ),
          (success) => state.copyWith(
            customerAccountsLoading: false,
            customerOtherBankLoading: false,
            sdaccountdetailsFailureorSuccess: none(),
            goldLoandetailsFailureorSuccess: none(),
            rddetailsFailureorSuccess: none(),
            customerAccountSuccessOrfailOption: none(),
            customerNotificationSuccessOrfailOption: none(),
            customerProfileSuccessOrfailOption: none(),
            customerScheduledTransactionSuccessOrfailOption: none(),
            customerStatementSuccessOrfailOption: none(),
            customerStatementTransactionsSuccessOrfailOption: none(),
            settlementDetailsFailureOrSuccess: none(),
            settlementFailureOrSuccess: none(),
            removeScheduledTransactionFailureOrSuccess: none(),
            availableSchemeFailureOrSuccess: none(),
            depositFailureOrSuccess: none(),
            customerPaymentSuccessOrfailOption: none(),
            withdrawalPostFailureOrSuccess: none(),
            removeCustomerNotificationFailureOrSuccess: none(),
            newSdPostFailureOrSuccess: none(),
            validateSalescodeFailureOrSuccess: none(),
            ifscCodeFailureOrSuccess: none(),
            customerBankFailureOrSuccess: none(),
            coApplicantRightsFailureOrSuccess: none(),
            nomineeRelationFailureOrSuccess: none(),
            accountMoreInfoFailureOrSuccess: none(),
            customerOtherBankSuccessOrfailOption: Some(
              Right(success),
            ),
            customerOtherBankAccounts: success,
          ),
        ),
      );
    });

    on<_OtherBankcardchanged>((event, emit) {
      emit(state.copyWith(
        otherbankindex: event.otherbankindex!,
        sdaccountdetailsFailureorSuccess: none(),
        goldLoandetailsFailureorSuccess: none(),
        rddetailsFailureorSuccess: none(),
        customerAccountSuccessOrfailOption: none(),
        customerOtherBankSuccessOrfailOption: none(),
        customerNotificationSuccessOrfailOption: none(),
        customerProfileSuccessOrfailOption: none(),
        customerScheduledTransactionSuccessOrfailOption: none(),
        customerStatementSuccessOrfailOption: none(),
        customerStatementTransactionsSuccessOrfailOption: none(),
        settlementDetailsFailureOrSuccess: none(),
        settlementFailureOrSuccess: none(),
        removeScheduledTransactionFailureOrSuccess: none(),
        availableSchemeFailureOrSuccess: none(),
        depositFailureOrSuccess: none(),
        customerPaymentSuccessOrfailOption: none(),
        withdrawalPostFailureOrSuccess: none(),
        removeCustomerNotificationFailureOrSuccess: none(),
        newSdPostFailureOrSuccess: none(),
        validateSalescodeFailureOrSuccess: none(),
        ifscCodeFailureOrSuccess: none(),
        customerBankFailureOrSuccess: none(),
        coApplicantRightsFailureOrSuccess: none(),
        nomineeRelationFailureOrSuccess: none(),
        accountMoreInfoFailureOrSuccess: none(),
      ));
    });

    on<_Datepicker>((event, emit) {
      emit(state.copyWith(
        datepicker: event.tradatepicker,
        sdaccountdetailsFailureorSuccess: none(),
        goldLoandetailsFailureorSuccess: none(),
        rddetailsFailureorSuccess: none(),
        customerAccountSuccessOrfailOption: none(),
        customerOtherBankSuccessOrfailOption: none(),
        customerNotificationSuccessOrfailOption: none(),
        customerProfileSuccessOrfailOption: none(),
        customerScheduledTransactionSuccessOrfailOption: none(),
        customerStatementSuccessOrfailOption: none(),
        customerStatementTransactionsSuccessOrfailOption: none(),
        settlementDetailsFailureOrSuccess: none(),
        settlementFailureOrSuccess: none(),
        removeScheduledTransactionFailureOrSuccess: none(),
        availableSchemeFailureOrSuccess: none(),
        depositFailureOrSuccess: none(),
        customerPaymentSuccessOrfailOption: none(),
        withdrawalPostFailureOrSuccess: none(),
        removeCustomerNotificationFailureOrSuccess: none(),
        newSdPostFailureOrSuccess: none(),
        validateSalescodeFailureOrSuccess: none(),
        ifscCodeFailureOrSuccess: none(),
        customerBankFailureOrSuccess: none(),
        coApplicantRightsFailureOrSuccess: none(),
        nomineeRelationFailureOrSuccess: none(),
        accountMoreInfoFailureOrSuccess: none(),
      ));
    });
/////////////////////Customer Account info/////////////////////
    on<_CustomerAccountInfoPageEvent>((event, emit) {
      emit(state.copyWith(
        sdaccountdetailsFailureorSuccess: none(),
        goldLoandetailsFailureorSuccess: none(),
        rddetailsFailureorSuccess: none(),
        customerAccountSuccessOrfailOption: none(),
        customerOtherBankSuccessOrfailOption: none(),
        customerNotificationSuccessOrfailOption: none(),
        customerProfileSuccessOrfailOption: none(),
        customerScheduledTransactionSuccessOrfailOption: none(),
        customerStatementSuccessOrfailOption: none(),
        customerStatementTransactionsSuccessOrfailOption: none(),
        settlementDetailsFailureOrSuccess: none(),
        settlementFailureOrSuccess: none(),
        removeScheduledTransactionFailureOrSuccess: none(),
        availableSchemeFailureOrSuccess: none(),
        depositFailureOrSuccess: none(),
        customerPaymentSuccessOrfailOption: none(),
        withdrawalPostFailureOrSuccess: none(),
        removeCustomerNotificationFailureOrSuccess: none(),
        newSdPostFailureOrSuccess: none(),
        validateSalescodeFailureOrSuccess: none(),
        ifscCodeFailureOrSuccess: none(),
        customerBankFailureOrSuccess: none(),
        coApplicantRightsFailureOrSuccess: none(),
        nomineeRelationFailureOrSuccess: none(),
        accountMoreInfoFailureOrSuccess: none(),
        customerAccountInfoPage: true,
        newSdPage: false,
        settlementPage: false,
        statementPage: false,
        depositPage: false,
        withdrawalPage: false,
      ));
    });
    on<_NewSdPageEvent>((event, emit) {
      emit(state.copyWith(
        sdaccountdetailsFailureorSuccess: none(),
        goldLoandetailsFailureorSuccess: none(),
        rddetailsFailureorSuccess: none(),
        customerAccountSuccessOrfailOption: none(),
        customerOtherBankSuccessOrfailOption: none(),
        customerNotificationSuccessOrfailOption: none(),
        customerProfileSuccessOrfailOption: none(),
        customerScheduledTransactionSuccessOrfailOption: none(),
        customerStatementSuccessOrfailOption: none(),
        customerStatementTransactionsSuccessOrfailOption: none(),
        settlementDetailsFailureOrSuccess: none(),
        settlementFailureOrSuccess: none(),
        removeScheduledTransactionFailureOrSuccess: none(),
        availableSchemeFailureOrSuccess: none(),
        depositFailureOrSuccess: none(),
        customerPaymentSuccessOrfailOption: none(),
        withdrawalPostFailureOrSuccess: none(),
        removeCustomerNotificationFailureOrSuccess: none(),
        newSdPostFailureOrSuccess: none(),
        validateSalescodeFailureOrSuccess: none(),
        ifscCodeFailureOrSuccess: none(),
        customerBankFailureOrSuccess: none(),
        coApplicantRightsFailureOrSuccess: none(),
        nomineeRelationFailureOrSuccess: none(),
        accountMoreInfoFailureOrSuccess: none(),
        newSdPage: true,
        settlementPage: false,
        statementPage: false,
        customerAccountInfoPage: false,
        depositPage: false,
        withdrawalPage: false,
        taxPayer: false,
      ));
    });
    on<_DepositPageEvent>((event, emit) {
      emit(state.copyWith(
        sdaccountdetailsFailureorSuccess: none(),
        goldLoandetailsFailureorSuccess: none(),
        rddetailsFailureorSuccess: none(),
        customerAccountSuccessOrfailOption: none(),
        customerOtherBankSuccessOrfailOption: none(),
        customerNotificationSuccessOrfailOption: none(),
        customerProfileSuccessOrfailOption: none(),
        customerScheduledTransactionSuccessOrfailOption: none(),
        customerStatementSuccessOrfailOption: none(),
        customerStatementTransactionsSuccessOrfailOption: none(),
        settlementDetailsFailureOrSuccess: none(),
        settlementFailureOrSuccess: none(),
        removeScheduledTransactionFailureOrSuccess: none(),
        availableSchemeFailureOrSuccess: none(),
        depositFailureOrSuccess: none(),
        customerPaymentSuccessOrfailOption: none(),
        withdrawalPostFailureOrSuccess: none(),
        removeCustomerNotificationFailureOrSuccess: none(),
        newSdPostFailureOrSuccess: none(),
        validateSalescodeFailureOrSuccess: none(),
        ifscCodeFailureOrSuccess: none(),
        customerBankFailureOrSuccess: none(),
        coApplicantRightsFailureOrSuccess: none(),
        nomineeRelationFailureOrSuccess: none(),
        accountMoreInfoFailureOrSuccess: none(),
        depositPage: true,
        settlementPage: false,
        statementPage: false,
        customerAccountInfoPage: false,
        newSdPage: false,
        withdrawalPage: false,
      ));
    });

    on<_FundTransferPageEvent>((event, emit) {
      emit(state.copyWith(
        sdaccountdetailsFailureorSuccess: none(),
        goldLoandetailsFailureorSuccess: none(),
        rddetailsFailureorSuccess: none(),
        customerAccountSuccessOrfailOption: none(),
        customerOtherBankSuccessOrfailOption: none(),
        customerNotificationSuccessOrfailOption: none(),
        customerProfileSuccessOrfailOption: none(),
        customerScheduledTransactionSuccessOrfailOption: none(),
        customerStatementSuccessOrfailOption: none(),
        customerStatementTransactionsSuccessOrfailOption: none(),
        settlementDetailsFailureOrSuccess: none(),
        settlementFailureOrSuccess: none(),
        removeScheduledTransactionFailureOrSuccess: none(),
        availableSchemeFailureOrSuccess: none(),
        depositFailureOrSuccess: none(),
        customerPaymentSuccessOrfailOption: none(),
        withdrawalPostFailureOrSuccess: none(),
        removeCustomerNotificationFailureOrSuccess: none(),
        newSdPostFailureOrSuccess: none(),
        validateSalescodeFailureOrSuccess: none(),
        ifscCodeFailureOrSuccess: none(),
        customerBankFailureOrSuccess: none(),
        coApplicantRightsFailureOrSuccess: none(),
        nomineeRelationFailureOrSuccess: none(),
        accountMoreInfoFailureOrSuccess: none(),
        withdrawalPage: true,
        newSdPage: false,
        settlementPage: false,
        statementPage: false,
        customerAccountInfoPage: false,
        depositPage: false,
      ));
    });
    on<_StatementPageEvent>((event, emit) {
      emit(state.copyWith(
        sdaccountdetailsFailureorSuccess: none(),
        goldLoandetailsFailureorSuccess: none(),
        rddetailsFailureorSuccess: none(),
        customerAccountSuccessOrfailOption: none(),
        customerOtherBankSuccessOrfailOption: none(),
        customerNotificationSuccessOrfailOption: none(),
        customerProfileSuccessOrfailOption: none(),
        customerScheduledTransactionSuccessOrfailOption: none(),
        customerStatementSuccessOrfailOption: none(),
        customerStatementTransactionsSuccessOrfailOption: none(),
        settlementDetailsFailureOrSuccess: none(),
        settlementFailureOrSuccess: none(),
        removeScheduledTransactionFailureOrSuccess: none(),
        availableSchemeFailureOrSuccess: none(),
        depositFailureOrSuccess: none(),
        customerPaymentSuccessOrfailOption: none(),
        withdrawalPostFailureOrSuccess: none(),
        removeCustomerNotificationFailureOrSuccess: none(),
        newSdPostFailureOrSuccess: none(),
        validateSalescodeFailureOrSuccess: none(),
        ifscCodeFailureOrSuccess: none(),
        customerBankFailureOrSuccess: none(),
        coApplicantRightsFailureOrSuccess: none(),
        nomineeRelationFailureOrSuccess: none(),
        accountMoreInfoFailureOrSuccess: none(),
        statementPage: true,
        newSdPage: false,
        settlementPage: false,
        withdrawalPage: false,
        customerAccountInfoPage: false,
        depositPage: false,
      ));
    });
    on<_SettlementPageEvent>((event, emit) {
      emit(state.copyWith(
        sdaccountdetailsFailureorSuccess: none(),
        goldLoandetailsFailureorSuccess: none(),
        rddetailsFailureorSuccess: none(),
        customerAccountSuccessOrfailOption: none(),
        customerOtherBankSuccessOrfailOption: none(),
        customerNotificationSuccessOrfailOption: none(),
        customerProfileSuccessOrfailOption: none(),
        customerScheduledTransactionSuccessOrfailOption: none(),
        customerStatementSuccessOrfailOption: none(),
        customerStatementTransactionsSuccessOrfailOption: none(),
        settlementDetailsFailureOrSuccess: none(),
        settlementFailureOrSuccess: none(),
        removeScheduledTransactionFailureOrSuccess: none(),
        availableSchemeFailureOrSuccess: none(),
        depositFailureOrSuccess: none(),
        customerPaymentSuccessOrfailOption: none(),
        withdrawalPostFailureOrSuccess: none(),
        removeCustomerNotificationFailureOrSuccess: none(),
        newSdPostFailureOrSuccess: none(),
        validateSalescodeFailureOrSuccess: none(),
        ifscCodeFailureOrSuccess: none(),
        customerBankFailureOrSuccess: none(),
        coApplicantRightsFailureOrSuccess: none(),
        nomineeRelationFailureOrSuccess: none(),
        accountMoreInfoFailureOrSuccess: none(),
        settlementPage: true,
        newSdPage: false,
        withdrawalPage: false,
        statementPage: false,
        customerAccountInfoPage: false,
        depositPage: false,
      ));
    });

    on<_RemoveScheduledTransaction>((event, emit) async {
      final Either<RemoveScheduledTransactionFailure, String>
          removeScheduledTransactionOption =
          await iRemoveScheduledTransactionRepo.removeScheduledTransaction(
        rtid: event.rtId,
        flag: event.flag,
        transactionDate: event.transactionDate,
        userType: event.userType,
        loginToken: state.loginToken,
      );
      emit(removeScheduledTransactionOption.fold(
          (l) => state.copyWith(
                removeScheduledTransactionFailureOrSuccess: Some(Left(l)),
                sdaccountdetailsFailureorSuccess: none(),
                goldLoandetailsFailureorSuccess: none(),
                rddetailsFailureorSuccess: none(),
                customerAccountSuccessOrfailOption: none(),
                customerOtherBankSuccessOrfailOption: none(),
                customerNotificationSuccessOrfailOption: none(),
                customerProfileSuccessOrfailOption: none(),
                customerScheduledTransactionSuccessOrfailOption: none(),
                customerStatementSuccessOrfailOption: none(),
                customerStatementTransactionsSuccessOrfailOption: none(),
                settlementDetailsFailureOrSuccess: none(),
                settlementFailureOrSuccess: none(),
                availableSchemeFailureOrSuccess: none(),
                depositFailureOrSuccess: none(),
                customerPaymentSuccessOrfailOption: none(),
                withdrawalPostFailureOrSuccess: none(),
                removeCustomerNotificationFailureOrSuccess: none(),
                newSdPostFailureOrSuccess: none(),
                validateSalescodeFailureOrSuccess: none(),
                ifscCodeFailureOrSuccess: none(),
                customerBankFailureOrSuccess: none(),
                coApplicantRightsFailureOrSuccess: none(),
                nomineeRelationFailureOrSuccess: none(),
                accountMoreInfoFailureOrSuccess: none(),
              ),
          (r) => state.copyWith(
                removeScheduledTransactionFailureOrSuccess: Some(Right(r)),
                sdaccountdetailsFailureorSuccess: none(),
                goldLoandetailsFailureorSuccess: none(),
                rddetailsFailureorSuccess: none(),
                customerAccountSuccessOrfailOption: none(),
                customerOtherBankSuccessOrfailOption: none(),
                customerNotificationSuccessOrfailOption: none(),
                customerProfileSuccessOrfailOption: none(),
                customerScheduledTransactionSuccessOrfailOption: none(),
                customerStatementSuccessOrfailOption: none(),
                customerStatementTransactionsSuccessOrfailOption: none(),
                settlementDetailsFailureOrSuccess: none(),
                settlementFailureOrSuccess: none(),
                availableSchemeFailureOrSuccess: none(),
                depositFailureOrSuccess: none(),
                customerPaymentSuccessOrfailOption: none(),
                withdrawalPostFailureOrSuccess: none(),
                removeCustomerNotificationFailureOrSuccess: none(),
                newSdPostFailureOrSuccess: none(),
                validateSalescodeFailureOrSuccess: none(),
                ifscCodeFailureOrSuccess: none(),
                customerBankFailureOrSuccess: none(),
                coApplicantRightsFailureOrSuccess: none(),
                nomineeRelationFailureOrSuccess: none(),
                accountMoreInfoFailureOrSuccess: none(),
              )));
    });

    on<_RemoveScheduledTransactionforOneDay>((event, emit) {
      emit(state.copyWith(
          forOneDay: !state.forOneDay!,
          forEveryMonth: false,
          removeScheduledTransactionflag: 0));
    });
    on<_RemoveScheduledTransactionforEveryMonth>((event, emit) {
      emit(state.copyWith(
          sdaccountdetailsFailureorSuccess: none(),
          goldLoandetailsFailureorSuccess: none(),
          rddetailsFailureorSuccess: none(),
          customerAccountSuccessOrfailOption: none(),
          customerOtherBankSuccessOrfailOption: none(),
          customerNotificationSuccessOrfailOption: none(),
          customerProfileSuccessOrfailOption: none(),
          customerScheduledTransactionSuccessOrfailOption: none(),
          customerStatementSuccessOrfailOption: none(),
          customerStatementTransactionsSuccessOrfailOption: none(),
          settlementDetailsFailureOrSuccess: none(),
          settlementFailureOrSuccess: none(),
          removeScheduledTransactionFailureOrSuccess: none(),
          availableSchemeFailureOrSuccess: none(),
          depositFailureOrSuccess: none(),
          customerPaymentSuccessOrfailOption: none(),
          withdrawalPostFailureOrSuccess: none(),
          removeCustomerNotificationFailureOrSuccess: none(),
          newSdPostFailureOrSuccess: none(),
          validateSalescodeFailureOrSuccess: none(),
          ifscCodeFailureOrSuccess: none(),
          customerBankFailureOrSuccess: none(),
          coApplicantRightsFailureOrSuccess: none(),
          nomineeRelationFailureOrSuccess: none(),
          accountMoreInfoFailureOrSuccess: none(),
          forEveryMonth: !state.forEveryMonth!,
          forOneDay: false,
          removeScheduledTransactionflag: 1));
    });
    on<_NegateCheckBoxValue>((event, emit) {
      emit(state.copyWith(
          sdaccountdetailsFailureorSuccess: none(),
          goldLoandetailsFailureorSuccess: none(),
          rddetailsFailureorSuccess: none(),
          customerAccountSuccessOrfailOption: none(),
          customerOtherBankSuccessOrfailOption: none(),
          customerNotificationSuccessOrfailOption: none(),
          customerProfileSuccessOrfailOption: none(),
          customerScheduledTransactionSuccessOrfailOption: none(),
          customerStatementSuccessOrfailOption: none(),
          customerStatementTransactionsSuccessOrfailOption: none(),
          settlementDetailsFailureOrSuccess: none(),
          settlementFailureOrSuccess: none(),
          removeScheduledTransactionFailureOrSuccess: none(),
          availableSchemeFailureOrSuccess: none(),
          depositFailureOrSuccess: none(),
          customerPaymentSuccessOrfailOption: none(),
          withdrawalPostFailureOrSuccess: none(),
          removeCustomerNotificationFailureOrSuccess: none(),
          newSdPostFailureOrSuccess: none(),
          validateSalescodeFailureOrSuccess: none(),
          ifscCodeFailureOrSuccess: none(),
          customerBankFailureOrSuccess: none(),
          coApplicantRightsFailureOrSuccess: none(),
          nomineeRelationFailureOrSuccess: none(),
          accountMoreInfoFailureOrSuccess: none(),
          forEveryMonth: false,
          forOneDay: false));
    });

    //-----------------------------------Deposit-------------------

    on<_FetchPaymentCards>((event, emit) async {
      print("_fetch payment cards event called");
      emit(state.copyWith(
        depositLoading: true,
        sdaccountdetailsFailureorSuccess: none(),
        goldLoandetailsFailureorSuccess: none(),
        rddetailsFailureorSuccess: none(),
        customerAccountSuccessOrfailOption: none(),
        customerOtherBankSuccessOrfailOption: none(),
        customerNotificationSuccessOrfailOption: none(),
        customerProfileSuccessOrfailOption: none(),
        customerScheduledTransactionSuccessOrfailOption: none(),
        customerStatementSuccessOrfailOption: none(),
        customerStatementTransactionsSuccessOrfailOption: none(),
        settlementDetailsFailureOrSuccess: none(),
        settlementFailureOrSuccess: none(),
        removeScheduledTransactionFailureOrSuccess: none(),
        availableSchemeFailureOrSuccess: none(),
        depositFailureOrSuccess: none(),
        customerPaymentSuccessOrfailOption: none(),
        withdrawalPostFailureOrSuccess: none(),
        removeCustomerNotificationFailureOrSuccess: none(),
        newSdPostFailureOrSuccess: none(),
        validateSalescodeFailureOrSuccess: none(),
        ifscCodeFailureOrSuccess: none(),
        customerBankFailureOrSuccess: none(),
        coApplicantRightsFailureOrSuccess: none(),
        nomineeRelationFailureOrSuccess: none(),
        accountMoreInfoFailureOrSuccess: none(),
      ));
      final Either<DepositFailure, List<PaymentCardModel>> paymentCardDetails =
          await iCustomerDeposit.fetchPaymentCardDetails(
              userType: event.userType,
              paymentType: event.paymentType,
              loginToken: state.loginToken);
      emit(
        paymentCardDetails.fold(
          (failure) => state.copyWith(
            depositLoading: false,
            customerSettlementLoading: false,
            sdaccountdetailsFailureorSuccess: none(),
            goldLoandetailsFailureorSuccess: none(),
            rddetailsFailureorSuccess: none(),
            customerAccountSuccessOrfailOption: none(),
            customerOtherBankSuccessOrfailOption: none(),
            customerNotificationSuccessOrfailOption: none(),
            customerProfileSuccessOrfailOption: none(),
            customerScheduledTransactionSuccessOrfailOption: none(),
            customerStatementSuccessOrfailOption: none(),
            customerStatementTransactionsSuccessOrfailOption: none(),
            settlementDetailsFailureOrSuccess: none(),
            settlementFailureOrSuccess: none(),
            removeScheduledTransactionFailureOrSuccess: none(),
            availableSchemeFailureOrSuccess: none(),
            depositFailureOrSuccess: none(),
            withdrawalPostFailureOrSuccess: none(),
            removeCustomerNotificationFailureOrSuccess: none(),
            newSdPostFailureOrSuccess: none(),
            validateSalescodeFailureOrSuccess: none(),
            ifscCodeFailureOrSuccess: none(),
            customerBankFailureOrSuccess: none(),
            coApplicantRightsFailureOrSuccess: none(),
            nomineeRelationFailureOrSuccess: none(),
            accountMoreInfoFailureOrSuccess: none(),
            customerPaymentSuccessOrfailOption: Some(Left(failure)),
          ),
          (success) => state.copyWith(
            depositLoading: false,
            customerSettlementLoading: false,
            customerAccountInfoPage: false,
            sdaccountdetailsFailureorSuccess: none(),
            goldLoandetailsFailureorSuccess: none(),
            rddetailsFailureorSuccess: none(),
            customerAccountSuccessOrfailOption: none(),
            customerOtherBankSuccessOrfailOption: none(),
            customerNotificationSuccessOrfailOption: none(),
            customerProfileSuccessOrfailOption: none(),
            customerScheduledTransactionSuccessOrfailOption: none(),
            customerStatementSuccessOrfailOption: none(),
            customerStatementTransactionsSuccessOrfailOption: none(),
            settlementDetailsFailureOrSuccess: none(),
            settlementFailureOrSuccess: none(),
            removeScheduledTransactionFailureOrSuccess: none(),
            availableSchemeFailureOrSuccess: none(),
            depositFailureOrSuccess: none(),
            withdrawalPostFailureOrSuccess: none(),
            removeCustomerNotificationFailureOrSuccess: none(),
            newSdPostFailureOrSuccess: none(),
            validateSalescodeFailureOrSuccess: none(),
            ifscCodeFailureOrSuccess: none(),
            customerBankFailureOrSuccess: none(),
            coApplicantRightsFailureOrSuccess: none(),
            nomineeRelationFailureOrSuccess: none(),
            accountMoreInfoFailureOrSuccess: none(),
            customerPaymentSuccessOrfailOption: Some(Right(success)),
            customerPaymentDetails: success,
          ),
        ),
      );
    });
    on<_FetchIfscCode>((event, emit) async {
      emit(state.copyWith(
        depositLoading: true,
        sdaccountdetailsFailureorSuccess: none(),
        goldLoandetailsFailureorSuccess: none(),
        rddetailsFailureorSuccess: none(),
        customerAccountSuccessOrfailOption: none(),
        customerOtherBankSuccessOrfailOption: none(),
        customerNotificationSuccessOrfailOption: none(),
        customerProfileSuccessOrfailOption: none(),
        customerScheduledTransactionSuccessOrfailOption: none(),
        customerStatementSuccessOrfailOption: none(),
        customerStatementTransactionsSuccessOrfailOption: none(),
        settlementDetailsFailureOrSuccess: none(),
        settlementFailureOrSuccess: none(),
        removeScheduledTransactionFailureOrSuccess: none(),
        availableSchemeFailureOrSuccess: none(),
        depositFailureOrSuccess: none(),
        customerPaymentSuccessOrfailOption: none(),
        withdrawalPostFailureOrSuccess: none(),
        removeCustomerNotificationFailureOrSuccess: none(),
        newSdPostFailureOrSuccess: none(),
        validateSalescodeFailureOrSuccess: none(),
        ifscCodeFailureOrSuccess: none(),
        customerBankFailureOrSuccess: none(),
        coApplicantRightsFailureOrSuccess: none(),
        nomineeRelationFailureOrSuccess: none(),
        accountMoreInfoFailureOrSuccess: none(),
      ));

      final Either<DepositFailure, IfscCodeModel> ifscDetails =
          await iCustomerDeposit.fetchIfscCode(ifscCode: state.depositIfscCode);
      emit(
        ifscDetails.fold(
          (failure) => state.copyWith(
              isIfscValid: false,
              depositLoading: false,
              customerSettlementLoading: false,
              sdaccountdetailsFailureorSuccess: none(),
              goldLoandetailsFailureorSuccess: none(),
              rddetailsFailureorSuccess: none(),
              customerAccountSuccessOrfailOption: none(),
              customerOtherBankSuccessOrfailOption: none(),
              customerNotificationSuccessOrfailOption: none(),
              customerProfileSuccessOrfailOption: none(),
              customerScheduledTransactionSuccessOrfailOption: none(),
              customerStatementSuccessOrfailOption: none(),
              customerStatementTransactionsSuccessOrfailOption: none(),
              settlementDetailsFailureOrSuccess: none(),
              settlementFailureOrSuccess: none(),
              removeScheduledTransactionFailureOrSuccess: none(),
              availableSchemeFailureOrSuccess: none(),
              depositFailureOrSuccess: none(),
              customerPaymentSuccessOrfailOption: none(),
              withdrawalPostFailureOrSuccess: none(),
              removeCustomerNotificationFailureOrSuccess: none(),
              newSdPostFailureOrSuccess: none(),
              validateSalescodeFailureOrSuccess: none(),
              customerBankFailureOrSuccess: none(),
              coApplicantRightsFailureOrSuccess: none(),
              nomineeRelationFailureOrSuccess: none(),
              accountMoreInfoFailureOrSuccess: none(),
              ifscCodeFailureOrSuccess: some(left(failure))),
          (success) => state.copyWith(
              isIfscValid: true,
              depositLoading: false,
              customerSettlementLoading: false,
              sdaccountdetailsFailureorSuccess: none(),
              goldLoandetailsFailureorSuccess: none(),
              rddetailsFailureorSuccess: none(),
              customerAccountSuccessOrfailOption: none(),
              customerOtherBankSuccessOrfailOption: none(),
              customerNotificationSuccessOrfailOption: none(),
              customerProfileSuccessOrfailOption: none(),
              customerScheduledTransactionSuccessOrfailOption: none(),
              customerStatementSuccessOrfailOption: none(),
              customerStatementTransactionsSuccessOrfailOption: none(),
              settlementDetailsFailureOrSuccess: none(),
              settlementFailureOrSuccess: none(),
              removeScheduledTransactionFailureOrSuccess: none(),
              availableSchemeFailureOrSuccess: none(),
              depositFailureOrSuccess: none(),
              customerPaymentSuccessOrfailOption: none(),
              withdrawalPostFailureOrSuccess: none(),
              removeCustomerNotificationFailureOrSuccess: none(),
              newSdPostFailureOrSuccess: none(),
              validateSalescodeFailureOrSuccess: none(),
              customerBankFailureOrSuccess: none(),
              coApplicantRightsFailureOrSuccess: none(),
              nomineeRelationFailureOrSuccess: none(),
              accountMoreInfoFailureOrSuccess: none(),
              ifscCodeFailureOrSuccess: some(
                Right(success),
              ),
              ifscCodeDetails: success),
        ),
      );
    });

    //--------------------------------------------------
    on<_FetchBankDetails>((event, emit) async {
      emit(state.copyWith(
        depositLoading: true,
        sdaccountdetailsFailureorSuccess: none(),
        goldLoandetailsFailureorSuccess: none(),
        rddetailsFailureorSuccess: none(),
        customerAccountSuccessOrfailOption: none(),
        customerOtherBankSuccessOrfailOption: none(),
        customerNotificationSuccessOrfailOption: none(),
        customerProfileSuccessOrfailOption: none(),
        customerScheduledTransactionSuccessOrfailOption: none(),
        customerStatementSuccessOrfailOption: none(),
        customerStatementTransactionsSuccessOrfailOption: none(),
        settlementDetailsFailureOrSuccess: none(),
        settlementFailureOrSuccess: none(),
        removeScheduledTransactionFailureOrSuccess: none(),
        availableSchemeFailureOrSuccess: none(),
        depositFailureOrSuccess: none(),
        customerPaymentSuccessOrfailOption: none(),
        withdrawalPostFailureOrSuccess: none(),
        removeCustomerNotificationFailureOrSuccess: none(),
        newSdPostFailureOrSuccess: none(),
        validateSalescodeFailureOrSuccess: none(),
        ifscCodeFailureOrSuccess: none(),
        customerBankFailureOrSuccess: none(),
        coApplicantRightsFailureOrSuccess: none(),
        nomineeRelationFailureOrSuccess: none(),
        accountMoreInfoFailureOrSuccess: none(),
      ));

      final Either<DepositFailure, List<CustomerBankModel>> customerBank =
          await iCustomerDeposit.getCustomerBanks(
              firmId: state.searchResultFirmId,
              branchId: state.searchResultBranchId);

      emit(
        customerBank.fold(
          (failure) => state.copyWith(
              depositLoading: false,
              customerSettlementLoading: false,
              sdaccountdetailsFailureorSuccess: none(),
              goldLoandetailsFailureorSuccess: none(),
              rddetailsFailureorSuccess: none(),
              customerAccountSuccessOrfailOption: none(),
              customerOtherBankSuccessOrfailOption: none(),
              customerNotificationSuccessOrfailOption: none(),
              customerProfileSuccessOrfailOption: none(),
              customerScheduledTransactionSuccessOrfailOption: none(),
              customerStatementSuccessOrfailOption: none(),
              customerStatementTransactionsSuccessOrfailOption: none(),
              settlementDetailsFailureOrSuccess: none(),
              settlementFailureOrSuccess: none(),
              removeScheduledTransactionFailureOrSuccess: none(),
              availableSchemeFailureOrSuccess: none(),
              depositFailureOrSuccess: none(),
              customerPaymentSuccessOrfailOption: none(),
              withdrawalPostFailureOrSuccess: none(),
              removeCustomerNotificationFailureOrSuccess: none(),
              newSdPostFailureOrSuccess: none(),
              validateSalescodeFailureOrSuccess: none(),
              ifscCodeFailureOrSuccess: none(),
              coApplicantRightsFailureOrSuccess: none(),
              nomineeRelationFailureOrSuccess: none(),
              accountMoreInfoFailureOrSuccess: none(),
              customerBankFailureOrSuccess: some(Left(failure))),
          (success) => state.copyWith(
              depositLoading: false,
              customerSettlementLoading: false,
              sdaccountdetailsFailureorSuccess: none(),
              goldLoandetailsFailureorSuccess: none(),
              rddetailsFailureorSuccess: none(),
              customerAccountSuccessOrfailOption: none(),
              customerOtherBankSuccessOrfailOption: none(),
              customerNotificationSuccessOrfailOption: none(),
              customerProfileSuccessOrfailOption: none(),
              customerScheduledTransactionSuccessOrfailOption: none(),
              customerStatementSuccessOrfailOption: none(),
              customerStatementTransactionsSuccessOrfailOption: none(),
              settlementDetailsFailureOrSuccess: none(),
              settlementFailureOrSuccess: none(),
              removeScheduledTransactionFailureOrSuccess: none(),
              availableSchemeFailureOrSuccess: none(),
              depositFailureOrSuccess: none(),
              customerPaymentSuccessOrfailOption: none(),
              withdrawalPostFailureOrSuccess: none(),
              removeCustomerNotificationFailureOrSuccess: none(),
              newSdPostFailureOrSuccess: none(),
              validateSalescodeFailureOrSuccess: none(),
              ifscCodeFailureOrSuccess: none(),
              coApplicantRightsFailureOrSuccess: none(),
              nomineeRelationFailureOrSuccess: none(),
              accountMoreInfoFailureOrSuccess: none(),
              customerBankFailureOrSuccess: some(Right(success)),
              customerBankDetails: success),
        ),
      );
    });

    on<_SubsidiaryBank>((event, emit) {
      emit(state.copyWith(
          sdaccountdetailsFailureorSuccess: none(),
          goldLoandetailsFailureorSuccess: none(),
          rddetailsFailureorSuccess: none(),
          customerAccountSuccessOrfailOption: none(),
          customerOtherBankSuccessOrfailOption: none(),
          customerNotificationSuccessOrfailOption: none(),
          customerProfileSuccessOrfailOption: none(),
          customerScheduledTransactionSuccessOrfailOption: none(),
          customerStatementSuccessOrfailOption: none(),
          customerStatementTransactionsSuccessOrfailOption: none(),
          settlementDetailsFailureOrSuccess: none(),
          settlementFailureOrSuccess: none(),
          removeScheduledTransactionFailureOrSuccess: none(),
          availableSchemeFailureOrSuccess: none(),
          depositFailureOrSuccess: none(),
          customerPaymentSuccessOrfailOption: none(),
          withdrawalPostFailureOrSuccess: none(),
          removeCustomerNotificationFailureOrSuccess: none(),
          newSdPostFailureOrSuccess: none(),
          validateSalescodeFailureOrSuccess: none(),
          ifscCodeFailureOrSuccess: none(),
          customerBankFailureOrSuccess: none(),
          coApplicantRightsFailureOrSuccess: none(),
          nomineeRelationFailureOrSuccess: none(),
          accountMoreInfoFailureOrSuccess: none(),
          subsidiaryBank: event.subsidiaryBank));
    });

    on<_SubsidiaryAccountNumber>((event, emit) {
      emit(state.copyWith(
          sdaccountdetailsFailureorSuccess: none(),
          goldLoandetailsFailureorSuccess: none(),
          rddetailsFailureorSuccess: none(),
          customerAccountSuccessOrfailOption: none(),
          customerOtherBankSuccessOrfailOption: none(),
          customerNotificationSuccessOrfailOption: none(),
          customerProfileSuccessOrfailOption: none(),
          customerScheduledTransactionSuccessOrfailOption: none(),
          customerStatementSuccessOrfailOption: none(),
          customerStatementTransactionsSuccessOrfailOption: none(),
          settlementDetailsFailureOrSuccess: none(),
          settlementFailureOrSuccess: none(),
          removeScheduledTransactionFailureOrSuccess: none(),
          availableSchemeFailureOrSuccess: none(),
          depositFailureOrSuccess: none(),
          customerPaymentSuccessOrfailOption: none(),
          withdrawalPostFailureOrSuccess: none(),
          removeCustomerNotificationFailureOrSuccess: none(),
          newSdPostFailureOrSuccess: none(),
          validateSalescodeFailureOrSuccess: none(),
          ifscCodeFailureOrSuccess: none(),
          customerBankFailureOrSuccess: none(),
          coApplicantRightsFailureOrSuccess: none(),
          nomineeRelationFailureOrSuccess: none(),
          accountMoreInfoFailureOrSuccess: none(),
          subsidiaryAccountNumber: event.subsidiaryAccountNumber));
    });

    on<_SetDropDownBankToInitial>((event, emit) {
      emit(state.copyWith(
          sdaccountdetailsFailureorSuccess: none(),
          goldLoandetailsFailureorSuccess: none(),
          rddetailsFailureorSuccess: none(),
          customerAccountSuccessOrfailOption: none(),
          customerOtherBankSuccessOrfailOption: none(),
          customerNotificationSuccessOrfailOption: none(),
          customerProfileSuccessOrfailOption: none(),
          customerScheduledTransactionSuccessOrfailOption: none(),
          customerStatementSuccessOrfailOption: none(),
          customerStatementTransactionsSuccessOrfailOption: none(),
          settlementDetailsFailureOrSuccess: none(),
          settlementFailureOrSuccess: none(),
          removeScheduledTransactionFailureOrSuccess: none(),
          availableSchemeFailureOrSuccess: none(),
          depositFailureOrSuccess: none(),
          customerPaymentSuccessOrfailOption: none(),
          withdrawalPostFailureOrSuccess: none(),
          removeCustomerNotificationFailureOrSuccess: none(),
          newSdPostFailureOrSuccess: none(),
          validateSalescodeFailureOrSuccess: none(),
          ifscCodeFailureOrSuccess: none(),
          customerBankFailureOrSuccess: none(),
          coApplicantRightsFailureOrSuccess: none(),
          accountMoreInfoFailureOrSuccess: none(),
          nomineeRelationFailureOrSuccess: none(),
          subsidiaryBank: 'Branch Bank'));
    });

    //---------------------------------

    on<_Deposit>((event, emit) async {
      if (state.depositAmount.isEmpty && state.isIfscValid) {
        return;
      }
      emit(state.copyWith(
        depositLoading: true,
        sdaccountdetailsFailureorSuccess: none(),
        goldLoandetailsFailureorSuccess: none(),
        rddetailsFailureorSuccess: none(),
        customerAccountSuccessOrfailOption: none(),
        customerOtherBankSuccessOrfailOption: none(),
        customerNotificationSuccessOrfailOption: none(),
        customerProfileSuccessOrfailOption: none(),
        customerScheduledTransactionSuccessOrfailOption: none(),
        customerStatementSuccessOrfailOption: none(),
        customerStatementTransactionsSuccessOrfailOption: none(),
        settlementDetailsFailureOrSuccess: none(),
        settlementFailureOrSuccess: none(),
        removeScheduledTransactionFailureOrSuccess: none(),
        availableSchemeFailureOrSuccess: none(),
        depositFailureOrSuccess: none(),
        customerPaymentSuccessOrfailOption: none(),
        withdrawalPostFailureOrSuccess: none(),
        removeCustomerNotificationFailureOrSuccess: none(),
        newSdPostFailureOrSuccess: none(),
        validateSalescodeFailureOrSuccess: none(),
        ifscCodeFailureOrSuccess: none(),
        customerBankFailureOrSuccess: none(),
        coApplicantRightsFailureOrSuccess: none(),
        accountMoreInfoFailureOrSuccess: none(),
        nomineeRelationFailureOrSuccess: none(),
      ));
      final Either<DepositFailure, DepositModel> deposit =
          await iCustomerDeposit.deposit(
        loginToken: state.loginToken,
        accountNumber: event.accountNumber,
        branchId: event.branchId,
        firmId: event.firmId,
        depositAmount: event.depositAmount,
        transactionMethod: event.transactionMethod,
        chequeNo: event.depositChequeNumber,
        depositCustomerBank: event.depositCustomerBank,
        subsidiaryBank: event.subsidiaryBank,
        subsidiaryAccountNumber: event.subsidiaryAccountNumber,
        customerName: event.customerName,
        empCode: event.empCode,
        depositRealizationDate: state.depositRealizationDate,
      );
      emit(
        deposit.fold(
          (failure) => state.copyWith(
            depositLoading: false,
            sdaccountdetailsFailureorSuccess: none(),
            goldLoandetailsFailureorSuccess: none(),
            rddetailsFailureorSuccess: none(),
            customerAccountSuccessOrfailOption: none(),
            customerOtherBankSuccessOrfailOption: none(),
            customerNotificationSuccessOrfailOption: none(),
            customerProfileSuccessOrfailOption: none(),
            customerScheduledTransactionSuccessOrfailOption: none(),
            customerStatementSuccessOrfailOption: none(),
            customerStatementTransactionsSuccessOrfailOption: none(),
            settlementDetailsFailureOrSuccess: none(),
            settlementFailureOrSuccess: none(),
            removeScheduledTransactionFailureOrSuccess: none(),
            availableSchemeFailureOrSuccess: none(),
            customerPaymentSuccessOrfailOption: none(),
            withdrawalPostFailureOrSuccess: none(),
            removeCustomerNotificationFailureOrSuccess: none(),
            newSdPostFailureOrSuccess: none(),
            validateSalescodeFailureOrSuccess: none(),
            ifscCodeFailureOrSuccess: none(),
            customerBankFailureOrSuccess: none(),
            coApplicantRightsFailureOrSuccess: none(),
            nomineeRelationFailureOrSuccess: none(),
            accountMoreInfoFailureOrSuccess: none(),
            depositFailureOrSuccess: Some(Left(failure)),
          ),
          (success) => state.copyWith(
              depositLoading: false,
              sdaccountdetailsFailureorSuccess: none(),
              goldLoandetailsFailureorSuccess: none(),
              rddetailsFailureorSuccess: none(),
              customerAccountSuccessOrfailOption: none(),
              customerOtherBankSuccessOrfailOption: none(),
              customerNotificationSuccessOrfailOption: none(),
              customerProfileSuccessOrfailOption: none(),
              customerScheduledTransactionSuccessOrfailOption: none(),
              customerStatementSuccessOrfailOption: none(),
              customerStatementTransactionsSuccessOrfailOption: none(),
              settlementDetailsFailureOrSuccess: none(),
              settlementFailureOrSuccess: none(),
              removeScheduledTransactionFailureOrSuccess: none(),
              availableSchemeFailureOrSuccess: none(),
              customerPaymentSuccessOrfailOption: none(),
              withdrawalPostFailureOrSuccess: none(),
              removeCustomerNotificationFailureOrSuccess: none(),
              newSdPostFailureOrSuccess: none(),
              validateSalescodeFailureOrSuccess: none(),
              ifscCodeFailureOrSuccess: none(),
              customerBankFailureOrSuccess: none(),
              coApplicantRightsFailureOrSuccess: none(),
              nomineeRelationFailureOrSuccess: none(),
              accountMoreInfoFailureOrSuccess: none(),
              depositFailureOrSuccess: Some(Right(success)),
              depositDetails: success),
        ),
      );
    });
    on<_AccountCardChanged>((event, emit) {
      emit(state.copyWith(
          sdaccountdetailsFailureorSuccess: none(),
          goldLoandetailsFailureorSuccess: none(),
          rddetailsFailureorSuccess: none(),
          customerAccountSuccessOrfailOption: none(),
          customerOtherBankSuccessOrfailOption: none(),
          customerNotificationSuccessOrfailOption: none(),
          customerProfileSuccessOrfailOption: none(),
          customerScheduledTransactionSuccessOrfailOption: none(),
          customerStatementSuccessOrfailOption: none(),
          customerStatementTransactionsSuccessOrfailOption: none(),
          settlementDetailsFailureOrSuccess: none(),
          settlementFailureOrSuccess: none(),
          removeScheduledTransactionFailureOrSuccess: none(),
          availableSchemeFailureOrSuccess: none(),
          depositFailureOrSuccess: none(),
          customerPaymentSuccessOrfailOption: none(),
          withdrawalPostFailureOrSuccess: none(),
          removeCustomerNotificationFailureOrSuccess: none(),
          newSdPostFailureOrSuccess: none(),
          validateSalescodeFailureOrSuccess: none(),
          ifscCodeFailureOrSuccess: none(),
          customerBankFailureOrSuccess: none(),
          coApplicantRightsFailureOrSuccess: none(),
          nomineeRelationFailureOrSuccess: none(),
          accountMoreInfoFailureOrSuccess: none(),
          accountCardIndex: event.accountCardIndex!));
    });

    on<_NonSettledAccountcardchanged>((event, emit) {
      emit(state.copyWith(
          sdaccountdetailsFailureorSuccess: none(),
          goldLoandetailsFailureorSuccess: none(),
          rddetailsFailureorSuccess: none(),
          customerAccountSuccessOrfailOption: none(),
          customerOtherBankSuccessOrfailOption: none(),
          customerNotificationSuccessOrfailOption: none(),
          customerProfileSuccessOrfailOption: none(),
          customerScheduledTransactionSuccessOrfailOption: none(),
          customerStatementSuccessOrfailOption: none(),
          customerStatementTransactionsSuccessOrfailOption: none(),
          settlementDetailsFailureOrSuccess: none(),
          settlementFailureOrSuccess: none(),
          removeScheduledTransactionFailureOrSuccess: none(),
          availableSchemeFailureOrSuccess: none(),
          depositFailureOrSuccess: none(),
          customerPaymentSuccessOrfailOption: none(),
          withdrawalPostFailureOrSuccess: none(),
          removeCustomerNotificationFailureOrSuccess: none(),
          newSdPostFailureOrSuccess: none(),
          validateSalescodeFailureOrSuccess: none(),
          ifscCodeFailureOrSuccess: none(),
          customerBankFailureOrSuccess: none(),
          coApplicantRightsFailureOrSuccess: none(),
          nomineeRelationFailureOrSuccess: none(),
          accountMoreInfoFailureOrSuccess: none(),
          nonSettledcardindex: event.nonSettledcardindex!));
    });

    on<_PaymentCardChanged>((event, emit) {
      emit(state.copyWith(
          sdaccountdetailsFailureorSuccess: none(),
          goldLoandetailsFailureorSuccess: none(),
          rddetailsFailureorSuccess: none(),
          customerAccountSuccessOrfailOption: none(),
          customerOtherBankSuccessOrfailOption: none(),
          customerNotificationSuccessOrfailOption: none(),
          customerProfileSuccessOrfailOption: none(),
          customerScheduledTransactionSuccessOrfailOption: none(),
          customerStatementSuccessOrfailOption: none(),
          customerStatementTransactionsSuccessOrfailOption: none(),
          settlementDetailsFailureOrSuccess: none(),
          settlementFailureOrSuccess: none(),
          removeScheduledTransactionFailureOrSuccess: none(),
          availableSchemeFailureOrSuccess: none(),
          depositFailureOrSuccess: none(),
          customerPaymentSuccessOrfailOption: none(),
          withdrawalPostFailureOrSuccess: none(),
          removeCustomerNotificationFailureOrSuccess: none(),
          newSdPostFailureOrSuccess: none(),
          validateSalescodeFailureOrSuccess: none(),
          ifscCodeFailureOrSuccess: none(),
          customerBankFailureOrSuccess: none(),
          coApplicantRightsFailureOrSuccess: none(),
          nomineeRelationFailureOrSuccess: none(),
          accountMoreInfoFailureOrSuccess: none(),
          paymentCardIndex: event.paymentCardIndex!));
    });

    on<_UpdateChqueNumber>((event, emit) {
      emit(state.copyWith(
          sdaccountdetailsFailureorSuccess: none(),
          goldLoandetailsFailureorSuccess: none(),
          rddetailsFailureorSuccess: none(),
          customerAccountSuccessOrfailOption: none(),
          customerOtherBankSuccessOrfailOption: none(),
          customerNotificationSuccessOrfailOption: none(),
          customerProfileSuccessOrfailOption: none(),
          customerScheduledTransactionSuccessOrfailOption: none(),
          customerStatementSuccessOrfailOption: none(),
          customerStatementTransactionsSuccessOrfailOption: none(),
          settlementDetailsFailureOrSuccess: none(),
          settlementFailureOrSuccess: none(),
          removeScheduledTransactionFailureOrSuccess: none(),
          availableSchemeFailureOrSuccess: none(),
          depositFailureOrSuccess: none(),
          customerPaymentSuccessOrfailOption: none(),
          withdrawalPostFailureOrSuccess: none(),
          removeCustomerNotificationFailureOrSuccess: none(),
          newSdPostFailureOrSuccess: none(),
          validateSalescodeFailureOrSuccess: none(),
          ifscCodeFailureOrSuccess: none(),
          customerBankFailureOrSuccess: none(),
          coApplicantRightsFailureOrSuccess: none(),
          nomineeRelationFailureOrSuccess: none(),
          accountMoreInfoFailureOrSuccess: none(),
          chequeNumber: event.depositChequeNumber));
    });
    on<_UpdateIfscCode>((event, emit) {
      emit(state.copyWith(
        sdaccountdetailsFailureorSuccess: none(),
        goldLoandetailsFailureorSuccess: none(),
        rddetailsFailureorSuccess: none(),
        customerAccountSuccessOrfailOption: none(),
        customerOtherBankSuccessOrfailOption: none(),
        customerNotificationSuccessOrfailOption: none(),
        customerProfileSuccessOrfailOption: none(),
        customerScheduledTransactionSuccessOrfailOption: none(),
        customerStatementSuccessOrfailOption: none(),
        customerStatementTransactionsSuccessOrfailOption: none(),
        settlementDetailsFailureOrSuccess: none(),
        settlementFailureOrSuccess: none(),
        removeScheduledTransactionFailureOrSuccess: none(),
        availableSchemeFailureOrSuccess: none(),
        depositFailureOrSuccess: none(),
        customerPaymentSuccessOrfailOption: none(),
        withdrawalPostFailureOrSuccess: none(),
        removeCustomerNotificationFailureOrSuccess: none(),
        newSdPostFailureOrSuccess: none(),
        validateSalescodeFailureOrSuccess: none(),
        ifscCodeFailureOrSuccess: none(),
        customerBankFailureOrSuccess: none(),
        coApplicantRightsFailureOrSuccess: none(),
        nomineeRelationFailureOrSuccess: none(),
        accountMoreInfoFailureOrSuccess: none(),
        depositIfscCode: event.depositIfscCode,
      ));
    });
    on<_UpdateCustomerBank>((event, emit) {
      emit(state.copyWith(
        sdaccountdetailsFailureorSuccess: none(),
        goldLoandetailsFailureorSuccess: none(),
        rddetailsFailureorSuccess: none(),
        customerAccountSuccessOrfailOption: none(),
        customerOtherBankSuccessOrfailOption: none(),
        customerNotificationSuccessOrfailOption: none(),
        customerProfileSuccessOrfailOption: none(),
        customerScheduledTransactionSuccessOrfailOption: none(),
        customerStatementSuccessOrfailOption: none(),
        customerStatementTransactionsSuccessOrfailOption: none(),
        settlementDetailsFailureOrSuccess: none(),
        settlementFailureOrSuccess: none(),
        removeScheduledTransactionFailureOrSuccess: none(),
        availableSchemeFailureOrSuccess: none(),
        depositFailureOrSuccess: none(),
        customerPaymentSuccessOrfailOption: none(),
        withdrawalPostFailureOrSuccess: none(),
        removeCustomerNotificationFailureOrSuccess: none(),
        newSdPostFailureOrSuccess: none(),
        validateSalescodeFailureOrSuccess: none(),
        ifscCodeFailureOrSuccess: none(),
        customerBankFailureOrSuccess: none(),
        coApplicantRightsFailureOrSuccess: none(),
        nomineeRelationFailureOrSuccess: none(),
        accountMoreInfoFailureOrSuccess: none(),
        subsidiaryBank: event.subsidiaryBank,
      ));
    });
    on<_UpdateRealizationDate>((event, emit) {
      emit(state.copyWith(
          sdaccountdetailsFailureorSuccess: none(),
          goldLoandetailsFailureorSuccess: none(),
          rddetailsFailureorSuccess: none(),
          customerAccountSuccessOrfailOption: none(),
          customerOtherBankSuccessOrfailOption: none(),
          customerNotificationSuccessOrfailOption: none(),
          customerProfileSuccessOrfailOption: none(),
          customerScheduledTransactionSuccessOrfailOption: none(),
          customerStatementSuccessOrfailOption: none(),
          customerStatementTransactionsSuccessOrfailOption: none(),
          settlementDetailsFailureOrSuccess: none(),
          settlementFailureOrSuccess: none(),
          removeScheduledTransactionFailureOrSuccess: none(),
          availableSchemeFailureOrSuccess: none(),
          depositFailureOrSuccess: none(),
          customerPaymentSuccessOrfailOption: none(),
          withdrawalPostFailureOrSuccess: none(),
          removeCustomerNotificationFailureOrSuccess: none(),
          newSdPostFailureOrSuccess: none(),
          validateSalescodeFailureOrSuccess: none(),
          ifscCodeFailureOrSuccess: none(),
          customerBankFailureOrSuccess: none(),
          coApplicantRightsFailureOrSuccess: none(),
          nomineeRelationFailureOrSuccess: none(),
          accountMoreInfoFailureOrSuccess: none(),
          depositRealizationDate: event.depositRealizationDate));
    });
    on<_UpdateAmount>((event, emit) {
      emit(state.copyWith(
          sdaccountdetailsFailureorSuccess: none(),
          goldLoandetailsFailureorSuccess: none(),
          rddetailsFailureorSuccess: none(),
          customerAccountSuccessOrfailOption: none(),
          customerOtherBankSuccessOrfailOption: none(),
          customerNotificationSuccessOrfailOption: none(),
          customerProfileSuccessOrfailOption: none(),
          customerScheduledTransactionSuccessOrfailOption: none(),
          customerStatementSuccessOrfailOption: none(),
          customerStatementTransactionsSuccessOrfailOption: none(),
          settlementDetailsFailureOrSuccess: none(),
          settlementFailureOrSuccess: none(),
          removeScheduledTransactionFailureOrSuccess: none(),
          availableSchemeFailureOrSuccess: none(),
          depositFailureOrSuccess: none(),
          customerPaymentSuccessOrfailOption: none(),
          withdrawalPostFailureOrSuccess: none(),
          removeCustomerNotificationFailureOrSuccess: none(),
          newSdPostFailureOrSuccess: none(),
          validateSalescodeFailureOrSuccess: none(),
          ifscCodeFailureOrSuccess: none(),
          customerBankFailureOrSuccess: none(),
          coApplicantRightsFailureOrSuccess: none(),
          nomineeRelationFailureOrSuccess: none(),
          accountMoreInfoFailureOrSuccess: none(),
          depositAmount: event.depositAmount));
    });
///////////////////withdrawal scheduled checkbox week & Month ////////////////////////
    on<_ScheduledWeekCheckbox>((event, emit) {
      emit(state.copyWith(
        sdaccountdetailsFailureorSuccess: none(),
        goldLoandetailsFailureorSuccess: none(),
        rddetailsFailureorSuccess: none(),
        customerAccountSuccessOrfailOption: none(),
        customerOtherBankSuccessOrfailOption: none(),
        customerNotificationSuccessOrfailOption: none(),
        customerProfileSuccessOrfailOption: none(),
        customerScheduledTransactionSuccessOrfailOption: none(),
        customerStatementSuccessOrfailOption: none(),
        customerStatementTransactionsSuccessOrfailOption: none(),
        settlementDetailsFailureOrSuccess: none(),
        settlementFailureOrSuccess: none(),
        removeScheduledTransactionFailureOrSuccess: none(),
        availableSchemeFailureOrSuccess: none(),
        depositFailureOrSuccess: none(),
        customerPaymentSuccessOrfailOption: none(),
        withdrawalPostFailureOrSuccess: none(),
        removeCustomerNotificationFailureOrSuccess: none(),
        newSdPostFailureOrSuccess: none(),
        validateSalescodeFailureOrSuccess: none(),
        ifscCodeFailureOrSuccess: none(),
        customerBankFailureOrSuccess: none(),
        coApplicantRightsFailureOrSuccess: none(),
        nomineeRelationFailureOrSuccess: none(),
        accountMoreInfoFailureOrSuccess: none(),
        scheduleWeek: event.weekcheck,
        scheduleMonth: false,
        recurringType: "Week",
      ));
    });
    on<_ScheduledMonthcheckbox>((event, emit) {
      emit(state.copyWith(
        sdaccountdetailsFailureorSuccess: none(),
        goldLoandetailsFailureorSuccess: none(),
        rddetailsFailureorSuccess: none(),
        customerAccountSuccessOrfailOption: none(),
        customerOtherBankSuccessOrfailOption: none(),
        customerNotificationSuccessOrfailOption: none(),
        customerProfileSuccessOrfailOption: none(),
        customerScheduledTransactionSuccessOrfailOption: none(),
        customerStatementSuccessOrfailOption: none(),
        customerStatementTransactionsSuccessOrfailOption: none(),
        settlementDetailsFailureOrSuccess: none(),
        settlementFailureOrSuccess: none(),
        removeScheduledTransactionFailureOrSuccess: none(),
        availableSchemeFailureOrSuccess: none(),
        depositFailureOrSuccess: none(),
        customerPaymentSuccessOrfailOption: none(),
        withdrawalPostFailureOrSuccess: none(),
        removeCustomerNotificationFailureOrSuccess: none(),
        newSdPostFailureOrSuccess: none(),
        validateSalescodeFailureOrSuccess: none(),
        ifscCodeFailureOrSuccess: none(),
        customerBankFailureOrSuccess: none(),
        coApplicantRightsFailureOrSuccess: none(),
        nomineeRelationFailureOrSuccess: none(),
        accountMoreInfoFailureOrSuccess: none(),
        scheduleMonth: event.monthcheck,
        scheduleWeek: false,
        recurringType: "Month",
      ));
    });

    on<_Clearedtextfield>((event, emit) {
      emit(state.copyWith(
        sdaccountdetailsFailureorSuccess: none(),
        goldLoandetailsFailureorSuccess: none(),
        rddetailsFailureorSuccess: none(),
        customerAccountSuccessOrfailOption: none(),
        customerOtherBankSuccessOrfailOption: none(),
        customerNotificationSuccessOrfailOption: none(),
        customerProfileSuccessOrfailOption: none(),
        customerScheduledTransactionSuccessOrfailOption: none(),
        customerStatementSuccessOrfailOption: none(),
        customerStatementTransactionsSuccessOrfailOption: none(),
        settlementDetailsFailureOrSuccess: none(),
        settlementFailureOrSuccess: none(),
        removeScheduledTransactionFailureOrSuccess: none(),
        availableSchemeFailureOrSuccess: none(),
        depositFailureOrSuccess: none(),
        customerPaymentSuccessOrfailOption: none(),
        withdrawalPostFailureOrSuccess: none(),
        removeCustomerNotificationFailureOrSuccess: none(),
        newSdPostFailureOrSuccess: none(),
        validateSalescodeFailureOrSuccess: none(),
        ifscCodeFailureOrSuccess: none(),
        customerBankFailureOrSuccess: none(),
        coApplicantRightsFailureOrSuccess: none(),
        nomineeRelationFailureOrSuccess: none(),
        accountMoreInfoFailureOrSuccess: none(),
        withdrawalAmount: 0.0,
        datepicker: " ",
        scheduleMonth: false,
        scheduleWeek: false,
        switchbuttondate: false,
        scheduledbutton: false,
        count: 1,
      ));
    });

    on<_Scheduledbutton>((event, emit) {
      emit(state.copyWith(
          sdaccountdetailsFailureorSuccess: none(),
          goldLoandetailsFailureorSuccess: none(),
          rddetailsFailureorSuccess: none(),
          customerAccountSuccessOrfailOption: none(),
          customerOtherBankSuccessOrfailOption: none(),
          customerNotificationSuccessOrfailOption: none(),
          customerProfileSuccessOrfailOption: none(),
          customerScheduledTransactionSuccessOrfailOption: none(),
          customerStatementSuccessOrfailOption: none(),
          customerStatementTransactionsSuccessOrfailOption: none(),
          settlementDetailsFailureOrSuccess: none(),
          settlementFailureOrSuccess: none(),
          removeScheduledTransactionFailureOrSuccess: none(),
          availableSchemeFailureOrSuccess: none(),
          depositFailureOrSuccess: none(),
          customerPaymentSuccessOrfailOption: none(),
          withdrawalPostFailureOrSuccess: none(),
          removeCustomerNotificationFailureOrSuccess: none(),
          newSdPostFailureOrSuccess: none(),
          validateSalescodeFailureOrSuccess: none(),
          ifscCodeFailureOrSuccess: none(),
          customerBankFailureOrSuccess: none(),
          coApplicantRightsFailureOrSuccess: none(),
          nomineeRelationFailureOrSuccess: none(),
          accountMoreInfoFailureOrSuccess: none(),
          scheduledbutton: event.scheduleddatebutton));
    });

    on<_Switchbutton>((event, emit) {
      emit(state.copyWith(
          sdaccountdetailsFailureorSuccess: none(),
          goldLoandetailsFailureorSuccess: none(),
          rddetailsFailureorSuccess: none(),
          customerAccountSuccessOrfailOption: none(),
          customerOtherBankSuccessOrfailOption: none(),
          customerNotificationSuccessOrfailOption: none(),
          customerProfileSuccessOrfailOption: none(),
          customerScheduledTransactionSuccessOrfailOption: none(),
          customerStatementSuccessOrfailOption: none(),
          customerStatementTransactionsSuccessOrfailOption: none(),
          settlementDetailsFailureOrSuccess: none(),
          settlementFailureOrSuccess: none(),
          removeScheduledTransactionFailureOrSuccess: none(),
          availableSchemeFailureOrSuccess: none(),
          depositFailureOrSuccess: none(),
          customerPaymentSuccessOrfailOption: none(),
          withdrawalPostFailureOrSuccess: none(),
          removeCustomerNotificationFailureOrSuccess: none(),
          newSdPostFailureOrSuccess: none(),
          validateSalescodeFailureOrSuccess: none(),
          ifscCodeFailureOrSuccess: none(),
          customerBankFailureOrSuccess: none(),
          coApplicantRightsFailureOrSuccess: none(),
          nomineeRelationFailureOrSuccess: none(),
          accountMoreInfoFailureOrSuccess: none(),
          switchbuttondate: event.switchbutton,
          scheduledbutton: true));
    });
    on<_Incrementbutton>((event, emit) {
      emit(state.copyWith(
          sdaccountdetailsFailureorSuccess: none(),
          goldLoandetailsFailureorSuccess: none(),
          rddetailsFailureorSuccess: none(),
          customerAccountSuccessOrfailOption: none(),
          customerOtherBankSuccessOrfailOption: none(),
          customerNotificationSuccessOrfailOption: none(),
          customerProfileSuccessOrfailOption: none(),
          customerScheduledTransactionSuccessOrfailOption: none(),
          customerStatementSuccessOrfailOption: none(),
          customerStatementTransactionsSuccessOrfailOption: none(),
          settlementDetailsFailureOrSuccess: none(),
          settlementFailureOrSuccess: none(),
          removeScheduledTransactionFailureOrSuccess: none(),
          availableSchemeFailureOrSuccess: none(),
          depositFailureOrSuccess: none(),
          customerPaymentSuccessOrfailOption: none(),
          withdrawalPostFailureOrSuccess: none(),
          removeCustomerNotificationFailureOrSuccess: none(),
          newSdPostFailureOrSuccess: none(),
          validateSalescodeFailureOrSuccess: none(),
          ifscCodeFailureOrSuccess: none(),
          customerBankFailureOrSuccess: none(),
          coApplicantRightsFailureOrSuccess: none(),
          nomineeRelationFailureOrSuccess: none(),
          accountMoreInfoFailureOrSuccess: none(),
          count: state.count + 1));
    });
    // ignore: void_checks
    on<_Decrementbutton>((event, emit) {
      if (state.count == 1) {
        return "";
      }
      emit(state.copyWith(
          sdaccountdetailsFailureorSuccess: none(),
          goldLoandetailsFailureorSuccess: none(),
          rddetailsFailureorSuccess: none(),
          customerAccountSuccessOrfailOption: none(),
          customerOtherBankSuccessOrfailOption: none(),
          customerNotificationSuccessOrfailOption: none(),
          customerProfileSuccessOrfailOption: none(),
          customerScheduledTransactionSuccessOrfailOption: none(),
          customerStatementSuccessOrfailOption: none(),
          customerStatementTransactionsSuccessOrfailOption: none(),
          settlementDetailsFailureOrSuccess: none(),
          settlementFailureOrSuccess: none(),
          removeScheduledTransactionFailureOrSuccess: none(),
          availableSchemeFailureOrSuccess: none(),
          depositFailureOrSuccess: none(),
          customerPaymentSuccessOrfailOption: none(),
          withdrawalPostFailureOrSuccess: none(),
          removeCustomerNotificationFailureOrSuccess: none(),
          newSdPostFailureOrSuccess: none(),
          validateSalescodeFailureOrSuccess: none(),
          ifscCodeFailureOrSuccess: none(),
          customerBankFailureOrSuccess: none(),
          coApplicantRightsFailureOrSuccess: none(),
          nomineeRelationFailureOrSuccess: none(),
          accountMoreInfoFailureOrSuccess: none(),
          count: state.count - 1));
    });

//////////////////////////////////////////////////////////////////////////////////////
    on<_Withdrawalpostmethod>((event, emit) async {
      print("userid is${event.customerId}");
      emit(
        state.copyWith(
          withdarawalpostLoading: true,
          sdaccountdetailsFailureorSuccess: none(),
          goldLoandetailsFailureorSuccess: none(),
          rddetailsFailureorSuccess: none(),
          customerAccountSuccessOrfailOption: none(),
          customerOtherBankSuccessOrfailOption: none(),
          customerNotificationSuccessOrfailOption: none(),
          customerProfileSuccessOrfailOption: none(),
          customerScheduledTransactionSuccessOrfailOption: none(),
          customerStatementSuccessOrfailOption: none(),
          customerStatementTransactionsSuccessOrfailOption: none(),
          settlementDetailsFailureOrSuccess: none(),
          settlementFailureOrSuccess: none(),
          removeScheduledTransactionFailureOrSuccess: none(),
          availableSchemeFailureOrSuccess: none(),
          depositFailureOrSuccess: none(),
          customerPaymentSuccessOrfailOption: none(),
          withdrawalPostFailureOrSuccess: none(),
          removeCustomerNotificationFailureOrSuccess: none(),
          newSdPostFailureOrSuccess: none(),
          validateSalescodeFailureOrSuccess: none(),
          ifscCodeFailureOrSuccess: none(),
          customerBankFailureOrSuccess: none(),
          coApplicantRightsFailureOrSuccess: none(),
          nomineeRelationFailureOrSuccess: none(),
          accountMoreInfoFailureOrSuccess: none(),
        ),
      );
      Either<CustomerFailure, PostwithdrawalResponseDatamodel>
          withdrawalOption =
          await iwithdrawalRepo.postwithdrawalTranscationDetails(
        loginToken: state.loginToken,
        customerId: event.customerId,
        branchid: event.branchid,
        amount: event.amount,
        transactionMethod: event.transactionMethod,
        // traDate: event.traDate,
        usertype: event.usertype,
        empcode: event.empcode,
        depositid: event.depositid,
        firmid: event.firmid,
        moduleId: event.moduleId,
        bankaccountNo: event.bankaccountNo,
        // branchName: event.branchName,
        // chqno: event.chqno,
        // customerBank: event.customerBank,
        // customerName: event.customerName,
        ifsccode: event.ifsccode,
        // realizationDate: event.realizationDate,
        // userid: event.userid,
        recurringtype: event.recurring,
        noOfTimes: event.noOfTimes,
        startDate: event.startDate,
        closeDate: event.closeDate,
      );
      emit(
        withdrawalOption.fold(
          (failure) => state.copyWith(
            withdarawalpostLoading: false,
            sdaccountdetailsFailureorSuccess: none(),
            goldLoandetailsFailureorSuccess: none(),
            rddetailsFailureorSuccess: none(),
            customerAccountSuccessOrfailOption: none(),
            customerOtherBankSuccessOrfailOption: none(),
            customerNotificationSuccessOrfailOption: none(),
            customerProfileSuccessOrfailOption: none(),
            customerScheduledTransactionSuccessOrfailOption: none(),
            customerStatementSuccessOrfailOption: none(),
            customerStatementTransactionsSuccessOrfailOption: none(),
            settlementDetailsFailureOrSuccess: none(),
            settlementFailureOrSuccess: none(),
            removeScheduledTransactionFailureOrSuccess: none(),
            availableSchemeFailureOrSuccess: none(),
            depositFailureOrSuccess: none(),
            customerPaymentSuccessOrfailOption: none(),
            removeCustomerNotificationFailureOrSuccess: none(),
            newSdPostFailureOrSuccess: none(),
            validateSalescodeFailureOrSuccess: none(),
            ifscCodeFailureOrSuccess: none(),
            customerBankFailureOrSuccess: none(),
            coApplicantRightsFailureOrSuccess: none(),
            nomineeRelationFailureOrSuccess: none(),
            accountMoreInfoFailureOrSuccess: none(),
            withdrawalPostFailureOrSuccess: Some(Left(failure)),
          ),
          (success) => state.copyWith(
            withdarawalpostLoading: true,
            sdaccountdetailsFailureorSuccess: none(),
            goldLoandetailsFailureorSuccess: none(),
            rddetailsFailureorSuccess: none(),
            customerAccountSuccessOrfailOption: none(),
            customerOtherBankSuccessOrfailOption: none(),
            customerNotificationSuccessOrfailOption: none(),
            customerProfileSuccessOrfailOption: none(),
            customerScheduledTransactionSuccessOrfailOption: none(),
            customerStatementSuccessOrfailOption: none(),
            customerStatementTransactionsSuccessOrfailOption: none(),
            settlementDetailsFailureOrSuccess: none(),
            settlementFailureOrSuccess: none(),
            removeScheduledTransactionFailureOrSuccess: none(),
            availableSchemeFailureOrSuccess: none(),
            depositFailureOrSuccess: none(),
            customerPaymentSuccessOrfailOption: none(),
            removeCustomerNotificationFailureOrSuccess: none(),
            newSdPostFailureOrSuccess: none(),
            validateSalescodeFailureOrSuccess: none(),
            ifscCodeFailureOrSuccess: none(),
            customerBankFailureOrSuccess: none(),
            coApplicantRightsFailureOrSuccess: none(),
            nomineeRelationFailureOrSuccess: none(),
            accountMoreInfoFailureOrSuccess: none(),
            withdrawalPostFailureOrSuccess: Some(Right(success)),
            postwithdrawaldatas: success,
          ),
        ),
      );
    });

//----------------searchSd card----in withdrawal-----------------------
    on<_sdsearchaccountno>((event, emit) {
      emit(state.copyWith(sdsearchNo: event.sdsearchNo));
    });

    // on<_sdsearchmobileno>((event, emit) {
    //   emit(state.copyWith(sdphonenumber: event.sdphonenumber));
    // });
    // on<_SdsearchResponseStatus>((event, emit) {
    //   emit(state.copyWith(sdStatus: event.sdStatus));
    // });
    on<_SearchsdReponsesStatus>((event, emit) {
      emit(state.copyWith(
        sdstatus: event.sdstatus,
        sdaccountdetailsFailureorSuccess: none(),
        goldLoandetailsFailureorSuccess: none(),
        rddetailsFailureorSuccess: none(),
        // customerProfileImageSuccessOrfailOption: none(),
        customerAccountSuccessOrfailOption: none(),
        //customerAccountMoreInfoSuccessorfailureOption: none(),
        customerOtherBankSuccessOrfailOption: none(),
        customerNotificationSuccessOrfailOption: none(),
        customerProfileSuccessOrfailOption: none(),
        customerScheduledTransactionSuccessOrfailOption: none(),
        customerStatementSuccessOrfailOption: none(),
        customerStatementTransactionsSuccessOrfailOption: none(),
        settlementDetailsFailureOrSuccess: none(),
        settlementFailureOrSuccess: none(),
        removeScheduledTransactionFailureOrSuccess: none(),
        availableSchemeFailureOrSuccess: none(),
        depositFailureOrSuccess: none(),
        customerPaymentSuccessOrfailOption: none(),

        withdrawalPostFailureOrSuccess: none(),
        removeCustomerNotificationFailureOrSuccess: none(),
        newSdPostFailureOrSuccess: none(),
        validateSalescodeFailureOrSuccess: none(),
        ifscCodeFailureOrSuccess: none(),
        customerBankFailureOrSuccess: none(),
        nomineeRelationFailureOrSuccess: none(),
        coApplicantRightsFailureOrSuccess: none(),
      ));
    });
    on<_SdsearchclearDatamodel>((event, emit) {
      emit(state.copyWith(
        sdaccountsearchdatas:
            const SdAccountSearchDataModel(customerName: "", mobileNumber: ""),
        rdsearchDatas:
            const RdDataModel(customername: "", branchId: -1, branchName: ''),
        goldloansearchdatas: const GoldLoanSearchDataModel(
            customername: "", branchId: -1, branchName: ''),
      ));
    });

    on<_Searchsdaccountbutton>((event, emit) async {
      emit(state.copyWith(
        sdaccountdetailsFailureorSuccess: none(),
        goldLoandetailsFailureorSuccess: none(),
        rddetailsFailureorSuccess: none(),
        customerAccountSuccessOrfailOption: none(),
        customerOtherBankSuccessOrfailOption: none(),
        customerNotificationSuccessOrfailOption: none(),
        customerProfileSuccessOrfailOption: none(),
        customerScheduledTransactionSuccessOrfailOption: none(),
        customerStatementSuccessOrfailOption: none(),
        customerStatementTransactionsSuccessOrfailOption: none(),
        settlementDetailsFailureOrSuccess: none(),
        settlementFailureOrSuccess: none(),
        removeScheduledTransactionFailureOrSuccess: none(),
        availableSchemeFailureOrSuccess: none(),
        depositFailureOrSuccess: none(),
        customerPaymentSuccessOrfailOption: none(),
        removeCustomerNotificationFailureOrSuccess: none(),
        newSdPostFailureOrSuccess: none(),
        validateSalescodeFailureOrSuccess: none(),
        ifscCodeFailureOrSuccess: none(),
        customerBankFailureOrSuccess: none(),
        coApplicantRightsFailureOrSuccess: none(),
        nomineeRelationFailureOrSuccess: none(),
        accountMoreInfoFailureOrSuccess: none(),
        withdrawalPostFailureOrSuccess: none(),
      ));
      final Either<CustomerFailure, SdAccountSearchDataModel>
          sdsearchaccountOption = await iCustomerRepo.getSdAccountSearchDetails(
        depositid: event.depositid,
        usertype: event.userType,
        loginToken: state.loginToken,
        // phonenumber: event.phonenumber
      );
      emit(sdsearchaccountOption.fold(
          (failure) => state.copyWith(
                sdsearchaccountdetailsLoading: false,
                goldLoandetailsFailureorSuccess: none(),
                rddetailsFailureorSuccess: none(),
                sdaccountdetailsFailureorSuccess: Some(Left(failure)),
                customerAccountSuccessOrfailOption: none(),
                customerOtherBankSuccessOrfailOption: none(),
                customerNotificationSuccessOrfailOption: none(),
                customerProfileSuccessOrfailOption: none(),
                customerScheduledTransactionSuccessOrfailOption: none(),
                customerStatementSuccessOrfailOption: none(),
                customerStatementTransactionsSuccessOrfailOption: none(),
                settlementDetailsFailureOrSuccess: none(),
                settlementFailureOrSuccess: none(),
                removeScheduledTransactionFailureOrSuccess: none(),
                availableSchemeFailureOrSuccess: none(),
                depositFailureOrSuccess: none(),
                customerPaymentSuccessOrfailOption: none(),
                removeCustomerNotificationFailureOrSuccess: none(),
                newSdPostFailureOrSuccess: none(),
                validateSalescodeFailureOrSuccess: none(),
                ifscCodeFailureOrSuccess: none(),
                customerBankFailureOrSuccess: none(),
                coApplicantRightsFailureOrSuccess: none(),
                nomineeRelationFailureOrSuccess: none(),
                accountMoreInfoFailureOrSuccess: none(),
                withdrawalPostFailureOrSuccess: none(),
              ),
          (success) => state.copyWith(
              sdsearchaccountdetailsLoading: false,
              sdaccountdetailsFailureorSuccess: Some(Right(success)),
              goldLoandetailsFailureorSuccess: none(),
              rddetailsFailureorSuccess: none(),
              customerAccountSuccessOrfailOption: none(),
              customerOtherBankSuccessOrfailOption: none(),
              customerNotificationSuccessOrfailOption: none(),
              customerProfileSuccessOrfailOption: none(),
              customerScheduledTransactionSuccessOrfailOption: none(),
              customerStatementSuccessOrfailOption: none(),
              customerStatementTransactionsSuccessOrfailOption: none(),
              settlementDetailsFailureOrSuccess: none(),
              settlementFailureOrSuccess: none(),
              removeScheduledTransactionFailureOrSuccess: none(),
              availableSchemeFailureOrSuccess: none(),
              depositFailureOrSuccess: none(),
              customerPaymentSuccessOrfailOption: none(),
              removeCustomerNotificationFailureOrSuccess: none(),
              newSdPostFailureOrSuccess: none(),
              validateSalescodeFailureOrSuccess: none(),
              ifscCodeFailureOrSuccess: none(),
              customerBankFailureOrSuccess: none(),
              coApplicantRightsFailureOrSuccess: none(),
              nomineeRelationFailureOrSuccess: none(),
              accountMoreInfoFailureOrSuccess: none(),
              withdrawalPostFailureOrSuccess: none(),
              sdaccountsearchdatas: success
              // employeeOrAgentDataModel: success
              )));
    });
    on<_SearchgoldLoanno>((event, emit) async {
      emit(state.copyWith(
        sdaccountdetailsFailureorSuccess: none(),
        goldLoandetailsFailureorSuccess: none(),
        rddetailsFailureorSuccess: none(),
        //  customerProfileImageSuccessOrfailOption: none(),
        customerAccountSuccessOrfailOption: none(),
        //   customerAccountMoreInfoSuccessorfailureOption: none(),
        customerOtherBankSuccessOrfailOption: none(),
        customerNotificationSuccessOrfailOption: none(),
        customerProfileSuccessOrfailOption: none(),
        customerScheduledTransactionSuccessOrfailOption: none(),
        customerStatementSuccessOrfailOption: none(),
        customerStatementTransactionsSuccessOrfailOption: none(),
        settlementDetailsFailureOrSuccess: none(),
        settlementFailureOrSuccess: none(),
        removeScheduledTransactionFailureOrSuccess: none(),
        availableSchemeFailureOrSuccess: none(),
        depositFailureOrSuccess: none(),
        customerPaymentSuccessOrfailOption: none(),

        withdrawalPostFailureOrSuccess: none(),
        removeCustomerNotificationFailureOrSuccess: none(),
        newSdPostFailureOrSuccess: none(),
        validateSalescodeFailureOrSuccess: none(),
        ifscCodeFailureOrSuccess: none(),
        customerBankFailureOrSuccess: none(),
        nomineeRelationFailureOrSuccess: none(),
        coApplicantRightsFailureOrSuccess: none(),
      ));
      final Either<CustomerFailure, GoldLoanSearchDataModel>
          goldloansearchaccountOption =
          await iwithdrawalRepo.goldLoanGetDetails(
              usertype: event.usertype,
              loginToken: state.loginToken,
              pledgeno: event.pledgeno);
      emit(goldloansearchaccountOption.fold(
          (failure) => state.copyWith(
                goldLoanaccountdetailsLoading: false,
                goldLoandetailsFailureorSuccess: Some(Left(failure)),
                sdaccountdetailsFailureorSuccess: none(),

                rddetailsFailureorSuccess: none(),

                // customerProfileImageSuccessOrfailOption: none(),
                customerAccountSuccessOrfailOption: none(),
                // customerAccountMoreInfoSuccessorfailureOption: none(),
                customerOtherBankSuccessOrfailOption: none(),
                customerNotificationSuccessOrfailOption: none(),
                customerProfileSuccessOrfailOption: none(),
                customerScheduledTransactionSuccessOrfailOption: none(),
                customerStatementSuccessOrfailOption: none(),
                customerStatementTransactionsSuccessOrfailOption: none(),
                settlementDetailsFailureOrSuccess: none(),
                settlementFailureOrSuccess: none(),
                removeScheduledTransactionFailureOrSuccess: none(),
                availableSchemeFailureOrSuccess: none(),
                depositFailureOrSuccess: none(),
                customerPaymentSuccessOrfailOption: none(),
                withdrawalPostFailureOrSuccess: none(),
                removeCustomerNotificationFailureOrSuccess: none(),
                newSdPostFailureOrSuccess: none(),
                validateSalescodeFailureOrSuccess: none(),
                ifscCodeFailureOrSuccess: none(),
                customerBankFailureOrSuccess: none(),
                nomineeRelationFailureOrSuccess: none(),
                coApplicantRightsFailureOrSuccess: none(),
              ),
          (success) => state.copyWith(
              goldLoanaccountdetailsLoading: false,
              goldLoandetailsFailureorSuccess: Some(Right(success)),
              sdaccountdetailsFailureorSuccess: none(),
              rddetailsFailureorSuccess: none(),

              // customerProfileImageSuccessOrfailOption: none(),
              customerAccountSuccessOrfailOption: none(),
              // customerAccountMoreInfoSuccessorfailureOption: none(),
              customerOtherBankSuccessOrfailOption: none(),
              customerNotificationSuccessOrfailOption: none(),
              customerProfileSuccessOrfailOption: none(),
              customerScheduledTransactionSuccessOrfailOption: none(),
              customerStatementSuccessOrfailOption: none(),
              customerStatementTransactionsSuccessOrfailOption: none(),
              settlementDetailsFailureOrSuccess: none(),
              settlementFailureOrSuccess: none(),
              removeScheduledTransactionFailureOrSuccess: none(),
              availableSchemeFailureOrSuccess: none(),
              depositFailureOrSuccess: none(),
              customerPaymentSuccessOrfailOption: none(),
              withdrawalPostFailureOrSuccess: none(),
              removeCustomerNotificationFailureOrSuccess: none(),
              newSdPostFailureOrSuccess: none(),
              validateSalescodeFailureOrSuccess: none(),
              ifscCodeFailureOrSuccess: none(),
              customerBankFailureOrSuccess: none(),
              nomineeRelationFailureOrSuccess: none(),
              coApplicantRightsFailureOrSuccess: none(),
              goldloansearchdatas: success
              // employeeOrAgentDataModel: success
              )));
    });
    on<_SearchRdNo>((event, emit) async {
      emit(state.copyWith(
        rddetailsFailureorSuccess: none(),
        sdaccountdetailsFailureorSuccess: none(),
        goldLoandetailsFailureorSuccess: none(),

        // customerProfileImageSuccessOrfailOption: none(),
        customerAccountSuccessOrfailOption: none(),
        // customerAccountMoreInfoSuccessorfailureOption: none(),
        customerOtherBankSuccessOrfailOption: none(),
        customerNotificationSuccessOrfailOption: none(),
        customerProfileSuccessOrfailOption: none(),
        customerScheduledTransactionSuccessOrfailOption: none(),
        customerStatementSuccessOrfailOption: none(),
        customerStatementTransactionsSuccessOrfailOption: none(),
        settlementDetailsFailureOrSuccess: none(),
        settlementFailureOrSuccess: none(),
        removeScheduledTransactionFailureOrSuccess: none(),
        availableSchemeFailureOrSuccess: none(),
        depositFailureOrSuccess: none(),
        customerPaymentSuccessOrfailOption: none(),

        withdrawalPostFailureOrSuccess: none(),
        removeCustomerNotificationFailureOrSuccess: none(),
        newSdPostFailureOrSuccess: none(),
        validateSalescodeFailureOrSuccess: none(),
        ifscCodeFailureOrSuccess: none(),
        customerBankFailureOrSuccess: none(),
        nomineeRelationFailureOrSuccess: none(),
        coApplicantRightsFailureOrSuccess: none(),
      ));
      final Either<CustomerFailure, RdDataModel> rdsearchDatasOption =
          await iwithdrawalRepo.getRdDetails(
              depositid: event.depositid,
              loginToken: state.loginToken,
              usertype: event.userType);
      emit(rdsearchDatasOption.fold(
          (failure) => state.copyWith(
                // goldLoanaccountdetailsLoading: false,
                rddetailsFailureorSuccess: Some(Left(failure)),
                goldLoandetailsFailureorSuccess: none(),
                sdaccountdetailsFailureorSuccess: none(),
                // customerProfileImageSuccessOrfailOption: none(),
                customerAccountSuccessOrfailOption: none(),
                // customerAccountMoreInfoSuccessorfailureOption: none(),
                customerOtherBankSuccessOrfailOption: none(),
                customerNotificationSuccessOrfailOption: none(),
                customerProfileSuccessOrfailOption: none(),
                customerScheduledTransactionSuccessOrfailOption: none(),
                customerStatementSuccessOrfailOption: none(),
                customerStatementTransactionsSuccessOrfailOption: none(),
                settlementDetailsFailureOrSuccess: none(),
                settlementFailureOrSuccess: none(),
                removeScheduledTransactionFailureOrSuccess: none(),
                availableSchemeFailureOrSuccess: none(),
                depositFailureOrSuccess: none(),
                customerPaymentSuccessOrfailOption: none(),
                withdrawalPostFailureOrSuccess: none(),
                removeCustomerNotificationFailureOrSuccess: none(),
                newSdPostFailureOrSuccess: none(),
                validateSalescodeFailureOrSuccess: none(),
                ifscCodeFailureOrSuccess: none(),
                customerBankFailureOrSuccess: none(),
                nomineeRelationFailureOrSuccess: none(),
                coApplicantRightsFailureOrSuccess: none(),
              ),
          (success) => state.copyWith(
              goldLoanaccountdetailsLoading: false,
              rddetailsFailureorSuccess: Some(Right(success)),
              goldLoandetailsFailureorSuccess: none(),
              sdaccountdetailsFailureorSuccess: none(),

              // customerProfileImageSuccessOrfailOption: none(),
              customerAccountSuccessOrfailOption: none(),
              // customerAccountMoreInfoSuccessorfailureOption: none(),
              customerOtherBankSuccessOrfailOption: none(),
              customerNotificationSuccessOrfailOption: none(),
              customerProfileSuccessOrfailOption: none(),
              customerScheduledTransactionSuccessOrfailOption: none(),
              customerStatementSuccessOrfailOption: none(),
              customerStatementTransactionsSuccessOrfailOption: none(),
              settlementDetailsFailureOrSuccess: none(),
              settlementFailureOrSuccess: none(),
              removeScheduledTransactionFailureOrSuccess: none(),
              availableSchemeFailureOrSuccess: none(),
              depositFailureOrSuccess: none(),
              customerPaymentSuccessOrfailOption: none(),
              withdrawalPostFailureOrSuccess: none(),
              removeCustomerNotificationFailureOrSuccess: none(),
              newSdPostFailureOrSuccess: none(),
              validateSalescodeFailureOrSuccess: none(),
              ifscCodeFailureOrSuccess: none(),
              customerBankFailureOrSuccess: none(),
              nomineeRelationFailureOrSuccess: none(),
              coApplicantRightsFailureOrSuccess: none(),
              rdsearchDatas: success
              // employeeOrAgentDataModel: success
              )));
    });

    on<_WithdrawalUpdated>((event, emit) {
      // final card = state.customerAccounts;
      // // if(card[state]){

      // // }
      emit(state.copyWith(
        sdaccountdetailsFailureorSuccess: none(),
        goldLoandetailsFailureorSuccess: none(),
        rddetailsFailureorSuccess: none(),
        customerAccountSuccessOrfailOption: none(),
        customerOtherBankSuccessOrfailOption: none(),
        customerNotificationSuccessOrfailOption: none(),
        customerProfileSuccessOrfailOption: none(),
        customerScheduledTransactionSuccessOrfailOption: none(),
        customerStatementSuccessOrfailOption: none(),
        customerStatementTransactionsSuccessOrfailOption: none(),
        settlementDetailsFailureOrSuccess: none(),
        settlementFailureOrSuccess: none(),
        removeScheduledTransactionFailureOrSuccess: none(),
        availableSchemeFailureOrSuccess: none(),
        depositFailureOrSuccess: none(),
        customerPaymentSuccessOrfailOption: none(),
        withdrawalPostFailureOrSuccess: none(),
        removeCustomerNotificationFailureOrSuccess: none(),
        newSdPostFailureOrSuccess: none(),
        validateSalescodeFailureOrSuccess: none(),
        ifscCodeFailureOrSuccess: none(),
        customerBankFailureOrSuccess: none(),
        coApplicantRightsFailureOrSuccess: none(),
        nomineeRelationFailureOrSuccess: none(),
        accountMoreInfoFailureOrSuccess: none(),
        withdrawalAmount: double.parse(event.withdrawalAmount),
      ));
    });

    on<_clearCheckbox>((event, emit) {
      emit(state.copyWith(
          sdaccountdetailsFailureorSuccess: none(),
          goldLoandetailsFailureorSuccess: none(),
          rddetailsFailureorSuccess: none(),
          customerAccountSuccessOrfailOption: none(),
          customerOtherBankSuccessOrfailOption: none(),
          customerNotificationSuccessOrfailOption: none(),
          customerProfileSuccessOrfailOption: none(),
          customerScheduledTransactionSuccessOrfailOption: none(),
          customerStatementSuccessOrfailOption: none(),
          customerStatementTransactionsSuccessOrfailOption: none(),
          settlementDetailsFailureOrSuccess: none(),
          settlementFailureOrSuccess: none(),
          removeScheduledTransactionFailureOrSuccess: none(),
          availableSchemeFailureOrSuccess: none(),
          depositFailureOrSuccess: none(),
          customerPaymentSuccessOrfailOption: none(),
          withdrawalPostFailureOrSuccess: none(),
          removeCustomerNotificationFailureOrSuccess: none(),
          newSdPostFailureOrSuccess: none(),
          validateSalescodeFailureOrSuccess: none(),
          ifscCodeFailureOrSuccess: none(),
          customerBankFailureOrSuccess: none(),
          coApplicantRightsFailureOrSuccess: none(),
          nomineeRelationFailureOrSuccess: none(),
          accountMoreInfoFailureOrSuccess: none(),
          scheduleMonth: false,
          scheduleWeek: false,
          count: 1));
    });

    //////////////////remove customer notification /////////////
    on<_RemoveCustomerNotification>((event, emit) async {
      Either<MainFailure, Unit> removeCustomerNotificationOption =
          await iRemoveCustomerNotification.removeCustomerNotification(
              userId: event.userId,
              alertId: event.alertId,
              loginToken: state.loginToken);

      emit(removeCustomerNotificationOption.fold(
          (failure) => state.copyWith(
                sdaccountdetailsFailureorSuccess: none(),
                goldLoandetailsFailureorSuccess: none(),
                rddetailsFailureorSuccess: none(),
                customerAccountSuccessOrfailOption: none(),
                customerOtherBankSuccessOrfailOption: none(),
                customerNotificationSuccessOrfailOption: none(),
                customerProfileSuccessOrfailOption: none(),
                customerScheduledTransactionSuccessOrfailOption: none(),
                customerStatementSuccessOrfailOption: none(),
                customerStatementTransactionsSuccessOrfailOption: none(),
                settlementDetailsFailureOrSuccess: none(),
                settlementFailureOrSuccess: none(),
                removeScheduledTransactionFailureOrSuccess: none(),
                availableSchemeFailureOrSuccess: none(),
                depositFailureOrSuccess: none(),
                customerPaymentSuccessOrfailOption: none(),
                withdrawalPostFailureOrSuccess: none(),
                newSdPostFailureOrSuccess: none(),
                validateSalescodeFailureOrSuccess: none(),
                ifscCodeFailureOrSuccess: none(),
                customerBankFailureOrSuccess: none(),
                coApplicantRightsFailureOrSuccess: none(),
                nomineeRelationFailureOrSuccess: none(),
                accountMoreInfoFailureOrSuccess: none(),
                removeCustomerNotificationFailureOrSuccess: Some(Left(failure)),
              ),
          (success) => state.copyWith(
              sdaccountdetailsFailureorSuccess: none(),
              goldLoandetailsFailureorSuccess: none(),
              rddetailsFailureorSuccess: none(),
              customerAccountSuccessOrfailOption: none(),
              customerOtherBankSuccessOrfailOption: none(),
              customerNotificationSuccessOrfailOption: none(),
              customerProfileSuccessOrfailOption: none(),
              customerScheduledTransactionSuccessOrfailOption: none(),
              customerStatementSuccessOrfailOption: none(),
              customerStatementTransactionsSuccessOrfailOption: none(),
              settlementDetailsFailureOrSuccess: none(),
              settlementFailureOrSuccess: none(),
              removeScheduledTransactionFailureOrSuccess: none(),
              availableSchemeFailureOrSuccess: none(),
              depositFailureOrSuccess: none(),
              customerPaymentSuccessOrfailOption: none(),
              withdrawalPostFailureOrSuccess: none(),
              newSdPostFailureOrSuccess: none(),
              validateSalescodeFailureOrSuccess: none(),
              ifscCodeFailureOrSuccess: none(),
              customerBankFailureOrSuccess: none(),
              coApplicantRightsFailureOrSuccess: none(),
              nomineeRelationFailureOrSuccess: none(),
              accountMoreInfoFailureOrSuccess: none(),
              removeCustomerNotificationFailureOrSuccess:
                  Some(Right(success)))));
    });
  }
}
